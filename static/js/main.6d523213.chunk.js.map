{"version":3,"sources":["game/utils.ts","game/constants.ts","game/objects/stars/stars.ts","game/scene/PolyScene.ts","game/objects/hitbox.ts","game/controls/polyControls.ts","game/objects/center.ts","game/controls/keyboardControls.ts","game/clock/PolyClock.ts","game/controls/objectController.ts","game/collider.ts","game/objects/ship/ship.ts","game/objects/followCamera.ts","game/renderer.ts","game/objects/asteroid/asteroid.ts","game/objects/asteroid/meshFactory.ts","game/objects/asteroid/manager.ts","game/objects/followMissile/followMissile.ts","game/objects/followMissile/meshFactory.ts","game/objects/followMissile/manager.ts","game/objects/shots/shot.ts","game/objects/shots/meshFactory.ts","game/objects/shots/manager.ts","hooks/usePolybius.ts","game/polybius.ts","App.tsx","index.tsx"],"names":["repeat","THREE","times","f","i","MathUtils","randomUnitVector","Math","random","normalize","chance","p","getDumpster","CENTER_RADIUS","isNil","value","undefined","assertExists","msg","UnexpectedNilError","Error","tooFarFromCenter","point","length","getOne","set","values","next","Stars","mesh","createStarsGeometry","starsGeometry","vertex","randFloat","distance","multiplyScalar","vertices","push","this","color","size","sizeAttenuation","forEach","material","geometry","stars","matrixAutoUpdate","updateMatrix","add","PolyScene","scene","remove","dispose","fog","light","instance","getInstance","Movements","PolyHitbox","followedObject","shape","hitboxDebug","debug","radius","wireframe","update","objectPosition","position","clone","center","copy","intersects","hitbox","intersectsSphere","internalGeometry","computeBoundingSphere","boundingSphere","Center","centerMesh","getIdleMoveState","up","down","left","right","forwards","backwards","rollLeft","rollRight","shoot","KeyboardControls","moveState","keyMapping","bindKey","key","movement","attachListeners","window","addEventListener","keyDownHandler","keyUpHandler","e","get","code","Map","getDefaultKeyMapping","PolyClock","clock","delta","elapsed","tick","getDelta","getElapsedTime","Groups","ObjectController","controls","object","shots","shotDelta","orbitSpeed","rollSpeed","forwardsAndBackwardsSpeed","inertiaFactor","shotRecoveryTime","moveState1","moveState2","factor","lerp","lerpMoveStates","updateDepth","updateOrbit","updateShots","depthMovement","abs","zOffset","objectRadius","setLength","xAxis","yAxis","zAxis","matrix","extractBasis","verticalOrbit","horizontalOrbit","verticalVector","horizontalVector","directionVector","addVectors","clampLength","rotationAngle","applyAxisAngle","roll","lookAt","spawn","PolyShip","onCollide","who","console","log","createGeometry","frontPoint","backTop","backLeft","backRight","Float32Array","setAttribute","FollowCamera","innerWidth","innerHeight","followedPosition","newPosition","lerpVectors","BLOOM_PARAMS","PolyRenderer","camera","renderer","composer","getDomElement","domElement","resize","setSize","render","toneMappingExposure","pow","renderScene","RenderPass","bloomPass","UnrealBloomPass","threshold","strength","EffectComposer","renderToScreen","addPass","Asteroid","meshFactory","drop","normal","angularVelocity","radialVelocity","angleToRotate","currentLength","lengthOffset","buildMesh","getHitboxGeometry","Vector3","AsteroidMeshFactory","hitboxGeometry","PolyCollider","rules","groups","addRule","g1","g2","addObjectToGroup","obj","group","removeObjectFromGroup","delete","o1","o2","polyObjectsCollide","Set","asteroids","ship","missiles","AsteroidManager","collider","idleObjects","liveObjects","spawnRandom","vec","x","mostPerpendicular","reduce","best","current","dot","negate","crossVectors","randomOrthogonalUnitVector","objectToSpawn","objectToDelete","_","setInterval","FollowMissile","direction","angSpeed","speed","align","updateRotation","updatePosition","updateFlames","towards","sub","angle","angleTo","clampedAngle","clamp","step","children","scale","y","sin","rotateY","cos","lookAtPos","rotateOnAxis","PI","MissileMeshFactory","misilMaterial","fireGeom","lightFireMat","darkFireMat","lightFire","darkFire","rotateX","FollowMissileManager","initialPosition","Shot","ShotMeshFactory","coreGeometry","coreMaterial","coreMesh","ShotManager","polybius","objectController","removeEventListener","aspect","updateProjectionMatrix","animate","requestAnimationFrame","message","App","polybiusRef","useEffect","element","appendChild","usePolybius","className","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d523213.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport { TOO_FAR_TO_CARE, CENTER_RADIUS } from './constants';\n\ntype RepeatFunction = (index: number) => void;\nexport const repeat = (times: number, f: RepeatFunction) => {\n    for (let i = 0; i < times; i++) {\n        f(i);\n    }\n};\n\nexport const MathUtils = THREE.MathUtils;\n\nexport const randomUnitVector = (): THREE.Vector3 => {\n    return new THREE.Vector3(Math.random(), Math.random(), Math.random()).normalize();\n};\n\nexport const randomOrthogonalUnitVector = (vec: THREE.Vector3): THREE.Vector3 => {\n    const x = new THREE.Vector3(1, 0, 0);\n    const y = new THREE.Vector3(0, 1, 0);\n    const z = new THREE.Vector3(0, 0, 1);\n\n    const mostPerpendicular = [y, z].reduce((best, current) => {\n        if (vec.dot(best) > vec.dot(current)) {\n            return current;\n        }\n        return best;\n    }, x);\n\n    if (chance(0.5)) {\n        mostPerpendicular.negate();\n    }\n\n    return new THREE.Vector3().crossVectors(vec, mostPerpendicular);\n};\n\nexport const randomTinyVector = (): THREE.Vector3 => {\n    return new THREE.Vector3(Math.random(), Math.random(), Math.random()).setLength(0.00001);\n};\n\nexport const getOrigin = (): THREE.Vector3 => {\n    return new THREE.Vector3(0, 0, 0);\n};\n\nexport const chance = (p: number): boolean => {\n    return Math.random() < p;\n};\n\n// The dumpster has to be very, very far from the center so the camera doesn't catch it.\nconst DUMPSTER_POSITION = CENTER_RADIUS * 1000;\nexport const getDumpster = (): THREE.Vector3 => {\n    return new THREE.Vector3(DUMPSTER_POSITION, DUMPSTER_POSITION, DUMPSTER_POSITION);\n};\n\nexport type nil = undefined | null;\n\nexport const isNil = (value: any): value is nil => {\n    return value === undefined || value === null;\n};\n\nexport const assertExists = <T>(value: T | nil, msg?: string): T => {\n    if (isNil(value)) {\n        throw new UnexpectedNilError(msg);\n    } else {\n        return value;\n    }\n};\n\nexport class UnexpectedNilError extends Error {\n    constructor(msg?: string) {\n        super(msg ?? 'Unexpected nil value!');\n    }\n}\n\nexport const consoleInfo = (message: string): void => {\n    const styles = `\n        background-color: #dadada;\n        color: #2b2bfa;\n        margin: 1em;\n        padding: 0.5em 1em;\n        border-radius: 9999px;\n        font-size: 14px;\n        text-align: center;\n        font-weight: 800;\n    `;\n    console.log(`%c${message}`, styles);\n};\n\nexport const noop = () => {};\n\nexport const tooFarFromCenter = (point: THREE.Vector3) => point.length() > TOO_FAR_TO_CARE;\n\nexport const getOne = <T>(set: Set<T>): T | nil => {\n    return set.values().next().value;\n};\n","import * as THREE from 'three';\n\nexport const CENTER_RADIUS = 5;\nexport const MIN_RADIUS = 3 * CENTER_RADIUS;\nexport const MAX_RADIUS = 10 * CENTER_RADIUS;\n\nexport const CENTER = new THREE.Vector3();\nexport const TOO_FAR_TO_CARE = CENTER_RADIUS * 15;\n\nexport const ASTEROIDS_IN_SCENE = 50;\nexport const MISSILES_IN_SCENE = 50;\nexport const SHOTS_IN_SCENE = 20;\n","import * as THREE from 'three';\nimport { repeat, MathUtils } from '../../utils';\nimport { CENTER_RADIUS } from '../../constants';\n\nexport class Stars {\n    public mesh: THREE.Group;\n\n    constructor() {\n        this.mesh = new THREE.Group();\n\n        const starsMaterials = [\n            new THREE.PointsMaterial({\n                color: 0x555555,\n                size: 2,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x555555,\n                size: 1,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x333333,\n                size: 2,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x3a3a3a,\n                size: 1,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x1a1a1a,\n                size: 2,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x1a1a1a,\n                size: 1,\n                sizeAttenuation: false,\n            }),\n        ];\n\n        starsMaterials.forEach((material) => {\n            const geometry = this.createStarsGeometry();\n            const stars = new THREE.Points(geometry, material);\n            stars.matrixAutoUpdate = false;\n            stars.updateMatrix();\n\n            this.mesh.add(stars);\n        });\n    }\n\n    private createStarsGeometry = (): THREE.Geometry => {\n        const starsGeometry = new THREE.Geometry();\n\n        repeat(1000, (i: number) => {\n            const vertex = new THREE.Vector3(\n                MathUtils.randFloat(-1, 1),\n                MathUtils.randFloat(-1, 1),\n                MathUtils.randFloat(-1, 1)\n            );\n            const distance = MathUtils.randFloat(CENTER_RADIUS * 20, CENTER_RADIUS * 100);\n            vertex.multiplyScalar(distance);\n\n            starsGeometry.vertices.push(vertex);\n        });\n\n        return starsGeometry;\n    };\n}\n","import * as THREE from 'three';\n\nexport class PolyScene {\n    public readonly scene: THREE.Scene;\n    private static instance: PolyScene;\n\n    private constructor() {\n        this.scene = new THREE.Scene();\n        this.scene.fog = new THREE.FogExp2(0x000000, 0.000025);\n\n        const light = new THREE.AmbientLight(0xffffff);\n        this.scene.add(light);\n    }\n\n    static getInstance = (): PolyScene => {\n        if (!PolyScene.instance) {\n            PolyScene.instance = new PolyScene();\n        }\n\n        return PolyScene.instance;\n    };\n\n    public add = (...objects: THREE.Object3D[]) => this.scene.add(...objects);\n\n    public remove = (...objects: THREE.Object3D[]) => this.scene.remove(...objects);\n\n    public dispose = () => this.scene.dispose();\n}\n","import * as THREE from 'three';\nimport { assertExists, isNil } from '../utils';\nimport { PolyScene } from '../scene/PolyScene';\n\nexport class PolyHitbox {\n    public shape: THREE.Sphere;\n    private hitboxDebug: THREE.Mesh | null;\n\n    constructor(\n        private followedObject: THREE.Object3D,\n        geometry: THREE.Geometry | THREE.BufferGeometry\n    ) {\n        const internalGeometry = geometry.clone();\n        internalGeometry.computeBoundingSphere();\n        this.shape = assertExists(internalGeometry.boundingSphere);\n\n        this.hitboxDebug = null;\n\n        this.update();\n    }\n\n    debug = (): void => {\n        const scene = PolyScene.getInstance();\n\n        const geometry = new THREE.SphereBufferGeometry(this.shape.radius, 8, 6);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0x324ca8,\n            wireframe: true,\n        });\n\n        this.hitboxDebug = new THREE.Mesh(geometry, material);\n\n        scene.add(this.hitboxDebug);\n\n        this.update();\n    };\n\n    update = (): void => {\n        const objectPosition = this.followedObject.position.clone();\n        this.shape.center.copy(objectPosition);\n        if (!isNil(this.hitboxDebug)) {\n            this.hitboxDebug.position.copy(objectPosition);\n        }\n    };\n\n    intersects = (hitbox: PolyHitbox): boolean => {\n        return this.shape.intersectsSphere(hitbox.shape);\n    };\n}\n","import { MathUtils } from '../utils';\n\n// All posible inputs\nexport enum Movements {\n    up = 'up',\n    down = 'down',\n    left = 'left',\n    right = 'right',\n    forwards = 'forwards',\n    backwards = 'backwards',\n    rollLeft = 'rollLeft',\n    rollRight = 'rollRight',\n    shoot = 'shoot',\n}\n\n/**\n * for each possible movement we have a number in [0, 1] instead of a boolean\n * so we can support analog input\n */\nexport type MoveState = Record<Movements, number>;\n\nexport const getIdleMoveState = (): MoveState => ({\n    [Movements.up]: 0,\n    [Movements.down]: 0,\n    [Movements.left]: 0,\n    [Movements.right]: 0,\n    [Movements.forwards]: 0,\n    [Movements.backwards]: 0,\n    [Movements.rollLeft]: 0,\n    [Movements.rollRight]: 0,\n    [Movements.shoot]: 0,\n});\n\nexport const lerpMoveStates = (\n    moveState1: MoveState,\n    moveState2: MoveState,\n    factor: number\n): MoveState => ({\n    [Movements.up]: MathUtils.lerp(moveState1[Movements.up], moveState2[Movements.up], factor),\n    [Movements.down]: MathUtils.lerp(\n        moveState1[Movements.down],\n        moveState2[Movements.down],\n        factor\n    ),\n    [Movements.left]: MathUtils.lerp(\n        moveState1[Movements.left],\n        moveState2[Movements.left],\n        factor\n    ),\n    [Movements.right]: MathUtils.lerp(\n        moveState1[Movements.right],\n        moveState2[Movements.right],\n        factor\n    ),\n    [Movements.forwards]: MathUtils.lerp(\n        moveState1[Movements.forwards],\n        moveState2[Movements.forwards],\n        factor\n    ),\n    [Movements.backwards]: MathUtils.lerp(\n        moveState1[Movements.backwards],\n        moveState2[Movements.backwards],\n        factor\n    ),\n    [Movements.rollLeft]: MathUtils.lerp(\n        moveState1[Movements.rollLeft],\n        moveState2[Movements.rollLeft],\n        factor\n    ),\n    [Movements.rollRight]: MathUtils.lerp(\n        moveState1[Movements.rollRight],\n        moveState2[Movements.rollRight],\n        factor\n    ),\n    [Movements.shoot]: moveState2[Movements.shoot],\n});\n\n// All controls must expost a move state\nexport interface PolyControls {\n    moveState: MoveState;\n}\n","import * as THREE from 'three';\nimport { PolyObject } from './polyObject';\nimport { CENTER_RADIUS } from '../constants';\nimport { PolyHitbox } from './hitbox';\n\nexport class Center implements PolyObject {\n    public mesh: THREE.Group;\n    public hitbox: PolyHitbox;\n\n    constructor() {\n        this.mesh = new THREE.Group();\n\n        const geometry = new THREE.SphereBufferGeometry(CENTER_RADIUS, 16, 12);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xfa2b2b,\n            wireframe: true,\n        });\n\n        const centerMesh = new THREE.Mesh(geometry, material);\n        this.mesh.add(centerMesh);\n\n        this.hitbox = new PolyHitbox(this.mesh, geometry);\n    }\n}\n","import { isNil } from '../utils';\nimport { Movements, MoveState, getIdleMoveState, PolyControls } from './polyControls';\n\n/**\n * PolyControls.\n *\n * This module takes care of binding keys to movements\n * and exposing an object that represents the current input\n * abstracted away from the actual keys that are being pressed\n */\n\n// Map movements to key 'code'\nexport type KeyMapping = Map<string, Movements>;\n\n// Default key binding\nexport const getDefaultKeyMapping = (): KeyMapping => {\n    const keyMapping = new Map();\n    keyMapping.set('KeyW', Movements.up);\n    keyMapping.set('KeyS', Movements.down);\n    keyMapping.set('KeyA', Movements.left);\n    keyMapping.set('KeyD', Movements.right);\n    keyMapping.set('KeyI', Movements.forwards);\n    keyMapping.set('KeyK', Movements.backwards);\n    keyMapping.set('KeyJ', Movements.rollLeft);\n    keyMapping.set('KeyL', Movements.rollRight);\n    keyMapping.set('Space', Movements.shoot);\n\n    return keyMapping;\n};\n\nexport class KeyboardControls implements PolyControls {\n    public moveState: MoveState;\n    private keyMapping: KeyMapping;\n\n    constructor() {\n        this.moveState = getIdleMoveState();\n        this.keyMapping = getDefaultKeyMapping();\n    }\n\n    // When binding a key reset the moveState to avoid locking buttons.\n    public bindKey = (key: string, movement: Movements): void => {\n        this.keyMapping.set(key, movement);\n        this.moveState = getIdleMoveState();\n    };\n\n    public attachListeners = (): void => {\n        window.addEventListener('keydown', this.keyDownHandler);\n        window.addEventListener('keyup', this.keyUpHandler);\n    };\n\n    public dispose = (): void => {\n        window.addEventListener('keydown', this.keyDownHandler);\n        window.addEventListener('keyup', this.keyUpHandler);\n    };\n\n    private keyDownHandler = (e: KeyboardEvent): void => {\n        const movement = this.keyMapping.get(e.code);\n\n        if (isNil(movement)) {\n            return;\n        }\n\n        this.moveState[movement] = 1;\n    };\n\n    private keyUpHandler = (e: KeyboardEvent): void => {\n        const movement = this.keyMapping.get(e.code);\n\n        if (isNil(movement)) {\n            return;\n        }\n\n        this.moveState[movement] = 0;\n    };\n}\n","import * as THREE from 'three';\n\n/**\n * Singleton clock, anyone can get the instance and check the delta time.\n *\n * The delta must be recomputed with `tick` on every render\n */\nexport class PolyClock {\n    private clock: THREE.Clock;\n    public delta: number;\n    public elapsed: number;\n    private static instance: PolyClock;\n\n    private constructor() {\n        // Autostarts\n        this.clock = new THREE.Clock();\n        this.delta = 0;\n        this.elapsed = 0;\n    }\n\n    static getInstance = (): PolyClock => {\n        if (!PolyClock.instance) {\n            PolyClock.instance = new PolyClock();\n        }\n\n        return PolyClock.instance;\n    };\n\n    public tick = (): void => {\n        this.delta = this.clock.getDelta();\n        this.elapsed = this.clock.getElapsedTime();\n    };\n}\n","import * as THREE from 'three';\nimport {\n    PolyControls,\n    Movements,\n    MoveState,\n    getIdleMoveState,\n    lerpMoveStates,\n} from './polyControls';\nimport { PolyClock } from '../clock/PolyClock';\nimport { MAX_RADIUS, MIN_RADIUS } from '../constants';\nimport { ShotManager } from '../objects/shots/manager';\n\n/**\n * Transforms an object based on the supplied controls\n */\nconst MOVEMENT_EPSILON = 0.00001;\n\nexport class ObjectController {\n    private clock: PolyClock;\n    private moveState: MoveState;\n    private shotDelta: number;\n\n    private orbitSpeed: number;\n    private rollSpeed: number;\n    private forwardsAndBackwardsSpeed: number;\n    private inertiaFactor: number;\n    private shotRecoveryTime: number;\n\n    constructor(\n        private controls: PolyControls,\n        private object: THREE.Object3D,\n        private shots: ShotManager\n    ) {\n        this.clock = PolyClock.getInstance();\n        this.moveState = getIdleMoveState();\n        this.shotDelta = 0;\n\n        this.orbitSpeed = 0.05;\n        this.rollSpeed = 0.05;\n        this.forwardsAndBackwardsSpeed = 0.5;\n        this.inertiaFactor = 0.1;\n        this.shotRecoveryTime = 0.15;\n\n        this.update();\n    }\n\n    // TODO: Make movement (and probably followCamera) frame independent\n    // See https://github.com/ivoelbert/poly-remake/ssues/2\n    public update = (): void => {\n        // Movement inertia\n        this.moveState = lerpMoveStates(\n            this.moveState,\n            this.controls.moveState,\n            this.inertiaFactor\n        );\n\n        this.updateDepth();\n        this.updateOrbit();\n        this.updateShots();\n    };\n\n    private updateDepth = (): void => {\n        const depthMovement =\n            this.moveState[Movements.backwards] - this.moveState[Movements.forwards];\n        if (Math.abs(depthMovement) > MOVEMENT_EPSILON) {\n            const zOffset = depthMovement * this.forwardsAndBackwardsSpeed;\n\n            let objectRadius = this.object.position.length();\n\n            if (objectRadius + zOffset < MIN_RADIUS) {\n                objectRadius = MIN_RADIUS;\n            } else if (objectRadius + zOffset > MAX_RADIUS) {\n                objectRadius = MAX_RADIUS;\n            } else {\n                objectRadius += zOffset;\n            }\n\n            this.object.position.setLength(objectRadius);\n        }\n    };\n\n    private updateOrbit = (): void => {\n        const xAxis = new THREE.Vector3();\n        const yAxis = new THREE.Vector3();\n        const zAxis = new THREE.Vector3();\n        this.object.matrix.extractBasis(xAxis, yAxis, zAxis);\n\n        const verticalOrbit = this.moveState[Movements.up] - this.moveState[Movements.down];\n        const horizontalOrbit = this.moveState[Movements.right] - this.moveState[Movements.left];\n\n        const verticalVector = xAxis.clone();\n        verticalVector.multiplyScalar(verticalOrbit);\n        const horizontalVector = yAxis.clone();\n        horizontalVector.multiplyScalar(horizontalOrbit);\n\n        const directionVector = new THREE.Vector3()\n            .addVectors(verticalVector, horizontalVector)\n            .clampLength(0, 1);\n        const rotationAngle = directionVector.length();\n\n        if (rotationAngle > MOVEMENT_EPSILON) {\n            directionVector.normalize();\n            this.object.position.applyAxisAngle(directionVector, rotationAngle * this.orbitSpeed);\n        }\n\n        const roll = this.moveState[Movements.rollRight] - this.moveState[Movements.rollLeft];\n        yAxis.applyAxisAngle(zAxis, roll * this.rollSpeed);\n        this.object.up.copy(yAxis);\n        this.object.lookAt(0, 0, 0);\n    };\n\n    private updateShots = (): void => {\n        const delta = this.clock.delta;\n        this.shotDelta += delta;\n\n        if (this.shotDelta > this.shotRecoveryTime && this.moveState[Movements.shoot] === 1) {\n            this.shotDelta = 0;\n            this.shots.spawn(this.object.position);\n        }\n    };\n}\n","import { PolyObject } from './objects/polyObject';\n\nexport enum Groups {\n    asteroids,\n    ship,\n    shots,\n    missiles,\n    center,\n}\n\ninterface Collider {\n    addRule: (g1: Groups, g2: Groups) => void;\n    addObjectToGroup: (obj: PolyObject, group: Groups) => void;\n    removeObjectFromGroup: (obj: PolyObject, group: Groups) => void;\n    update: () => void;\n}\n\ntype ColliderGroups = Record<Groups, Set<PolyObject>>;\n\nexport class PolyCollider implements Collider {\n    private rules: Set<[Groups, Groups]>;\n    private groups: ColliderGroups;\n\n    constructor() {\n        this.rules = new Set();\n        this.groups = {\n            [Groups.asteroids]: new Set(),\n            [Groups.ship]: new Set(),\n            [Groups.shots]: new Set(),\n            [Groups.missiles]: new Set(),\n            [Groups.center]: new Set(),\n        };\n    }\n\n    addRule = (g1: Groups, g2: Groups): void => {\n        this.rules.add([g1, g2]);\n    };\n\n    addObjectToGroup = (obj: PolyObject, group: Groups): void => {\n        this.groups[group].add(obj);\n    };\n\n    removeObjectFromGroup = (obj: PolyObject, group: Groups): void => {\n        this.groups[group].delete(obj);\n    };\n\n    update = (): void => {\n        this.rules.forEach(([g1, g2]) => {\n            this.groups[g1].forEach((o1) => {\n                this.groups[g2].forEach((o2) => {\n                    if (polyObjectsCollide(o1, o2)) {\n                        o1.onCollide?.(o2);\n                        o2.onCollide?.(o1);\n                    }\n                });\n            });\n        });\n    };\n}\n\nconst polyObjectsCollide = (o1: PolyObject, o2: PolyObject): boolean => {\n    return o1.hitbox.intersects(o2.hitbox);\n};\n","import * as THREE from 'three';\nimport { PolyObject } from '../polyObject';\nimport { MAX_RADIUS } from '../../constants';\nimport { PolyHitbox } from '../hitbox';\n\nexport class PolyShip implements PolyObject {\n    public mesh: THREE.Object3D;\n    public hitbox: PolyHitbox;\n\n    constructor() {\n        const geometry = this.createGeometry();\n\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xfafafa,\n            wireframe: true,\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.position.set(0, 0, MAX_RADIUS);\n\n        this.hitbox = new PolyHitbox(this.mesh, geometry);\n    }\n\n    public update = () => {\n        this.hitbox.update();\n    };\n\n    public onCollide = (who: PolyObject): void => {\n        console.log('OH SHIT!');\n    };\n\n    private createGeometry = (): THREE.BufferGeometry => {\n        const geometry = new THREE.BufferGeometry();\n\n        const frontPoint = [0, 0, 1];\n        const backTop = [0, 0.25, 0];\n        const backLeft = [-0.5, -0.25, 0];\n        const backRight = [0.5, -0.25, 0];\n\n        const vertices = new Float32Array([\n            ...frontPoint,\n            ...backTop,\n            ...backLeft,\n\n            ...frontPoint,\n            ...backTop,\n            ...backRight,\n\n            ...frontPoint,\n            ...backLeft,\n            ...backRight,\n\n            ...backTop,\n            ...backLeft,\n            ...backRight,\n        ]);\n\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\n        return geometry;\n    };\n}\n","import * as THREE from 'three';\nimport { PolyClock } from '../clock/PolyClock';\n\nexport class FollowCamera extends THREE.PerspectiveCamera {\n    private clock: PolyClock;\n    private distance: number;\n    private inertiaFactor: number;\n\n    constructor(private followedObject: THREE.Object3D) {\n        super(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n        this.distance = 2;\n        this.inertiaFactor = 0.8;\n        this.clock = PolyClock.getInstance();\n\n        this.update();\n    }\n\n    // TODO: Make movement (and probably followCamera) frame independent\n    // See https://github.com/ivoelbert/poly-remake/issues/2\n    update = (): void => {\n        const followedPosition = this.followedObject.position.clone();\n        followedPosition.add(followedPosition.clone().normalize().multiplyScalar(this.distance));\n\n        const newPosition = new THREE.Vector3().lerpVectors(\n            this.position,\n            followedPosition,\n            this.inertiaFactor\n        );\n\n        this.position.copy(newPosition);\n        this.up.copy(this.followedObject.up);\n        this.lookAt(0, 0, 0);\n    };\n}\n","import * as THREE from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\n\nconst BLOOM_PARAMS = {\n    exposure: 1.05,\n    bloomStrength: 1.2,\n    bloomThreshold: 0,\n    bloomRadius: 0,\n};\n\nexport class PolyRenderer {\n    private renderer: THREE.WebGLRenderer;\n    private composer: EffectComposer;\n\n    constructor(scene: THREE.Scene, camera: THREE.Camera) {\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.toneMappingExposure = Math.pow(BLOOM_PARAMS.exposure, 4.0);\n\n        const renderScene = new RenderPass(scene, camera);\n\n        const bloomPass = new UnrealBloomPass(\n            new THREE.Vector2(window.innerWidth, window.innerHeight),\n            1.5,\n            0.4,\n            0.85\n        );\n        bloomPass.threshold = BLOOM_PARAMS.bloomThreshold;\n        bloomPass.strength = BLOOM_PARAMS.bloomStrength;\n        bloomPass.radius = BLOOM_PARAMS.bloomRadius;\n\n        this.composer = new EffectComposer(this.renderer);\n        this.composer.renderToScreen = false;\n        this.composer.addPass(renderScene);\n        this.composer.addPass(bloomPass);\n\n        this.composer.renderToScreen = true;\n    }\n\n    public getDomElement = (): HTMLCanvasElement => {\n        return this.renderer.domElement;\n    };\n\n    public resize = (): void => {\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.composer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    public render = (): void => {\n        this.composer.render();\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from '../polyObject';\nimport { Vector3 } from 'three';\nimport { PolyClock } from '../../clock/PolyClock';\nimport { tooFarFromCenter } from '../../utils';\nimport { DropFunction } from '../manager';\nimport { AsteroidMeshFactory } from './meshFactory';\nimport { PolyHitbox } from '../hitbox';\n\nexport class Asteroid implements PolyObject {\n    public mesh: THREE.Object3D;\n    public hitbox: PolyHitbox;\n\n    private normal: Vector3;\n    private drop: () => void;\n    private angularVelocity: number;\n    private radialVelocity: number;\n    private clock: PolyClock;\n\n    constructor(meshFactory: AsteroidMeshFactory, drop: DropFunction<Asteroid>) {\n        this.mesh = meshFactory.buildMesh();\n        this.hitbox = new PolyHitbox(this.mesh, meshFactory.getHitboxGeometry());\n\n        this.normal = new Vector3(0, 1, 0);\n\n        this.angularVelocity = 1;\n        this.radialVelocity = 1;\n        this.clock = PolyClock.getInstance();\n        this.drop = () => drop(this);\n    }\n\n    public spawn = (position: Vector3, normal: Vector3): void => {\n        this.mesh.position.copy(position);\n        this.normal = normal;\n    };\n\n    public onCollide = (who: PolyObject): void => {\n        this.drop();\n    };\n\n    public update = (): void => {\n        const { delta } = this.clock;\n        // Rotation\n        const angleToRotate = this.angularVelocity * delta;\n        this.mesh.position.applyAxisAngle(this.normal, angleToRotate);\n\n        // radial movement\n        const currentLength = this.mesh.position.length();\n        const lengthOffset = this.radialVelocity * delta;\n        this.mesh.position.setLength(currentLength + lengthOffset);\n\n        this.hitbox.update();\n\n        if (tooFarFromCenter(this.mesh.position)) {\n            this.drop();\n        }\n    };\n}\n","import * as THREE from 'three';\nimport { MeshFactory } from '../meshFactory';\n\nexport class AsteroidMeshFactory implements MeshFactory {\n    private mesh: THREE.Mesh;\n    private hitboxGeometry: THREE.Geometry | THREE.BufferGeometry;\n\n    constructor() {\n        this.hitboxGeometry = new THREE.DodecahedronBufferGeometry(1);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0x2bfa2b,\n            wireframe: true,\n        });\n\n        this.mesh = new THREE.Mesh(this.hitboxGeometry, material);\n    }\n\n    public buildMesh = (): THREE.Mesh => {\n        return this.mesh.clone();\n    };\n\n    public getHitboxGeometry = (): THREE.Geometry | THREE.BufferGeometry => {\n        return this.hitboxGeometry.clone();\n    };\n}\n","import { Vector3 } from 'three';\nimport { Asteroid } from './asteroid';\nimport { PolyScene } from '../../scene/PolyScene';\nimport {\n    repeat,\n    getDumpster,\n    randomUnitVector,\n    assertExists,\n    getOne,\n    randomOrthogonalUnitVector,\n} from '../../utils';\nimport { ASTEROIDS_IN_SCENE } from '../../constants';\nimport { Manager } from '../manager';\nimport { AsteroidMeshFactory } from './meshFactory';\nimport { PolyCollider, Groups } from '../../collider';\n\nexport class AsteroidManager implements Manager<Asteroid> {\n    private idleObjects: Set<Asteroid>;\n    private liveObjects: Set<Asteroid>;\n    private scene: PolyScene;\n    private meshFactory: AsteroidMeshFactory;\n\n    constructor(private collider: PolyCollider) {\n        this.idleObjects = new Set();\n        this.liveObjects = new Set();\n        this.scene = PolyScene.getInstance();\n        this.meshFactory = new AsteroidMeshFactory();\n\n        repeat(ASTEROIDS_IN_SCENE, (_) => {\n            const object = new Asteroid(this.meshFactory, this.drop);\n            object.mesh.position.copy(getDumpster());\n            this.idleObjects.add(object);\n        });\n\n        this.idleObjects.forEach((object) => this.scene.add(object.mesh));\n\n        // For debug only\n        setInterval(this.spawnRandom, 3000);\n    }\n\n    private spawnRandom = (): void => {\n        const normal = randomUnitVector();\n        const position = randomOrthogonalUnitVector(normal);\n\n        this.spawn(position, normal);\n    };\n\n    public spawn = (position: Vector3, normal: Vector3) => {\n        // If no available objects blow up. In the future we should do better.\n        // A FIFO structure that drops the oldest element and spawns the new one.\n        const objectToSpawn = assertExists(getOne(this.idleObjects));\n\n        this.idleObjects.delete(objectToSpawn);\n        this.liveObjects.add(objectToSpawn);\n\n        objectToSpawn.spawn(position, normal);\n\n        this.collider.addObjectToGroup(objectToSpawn, Groups.asteroids);\n    };\n\n    public drop = (objectToDelete: Asteroid) => {\n        objectToDelete.mesh.position.copy(getDumpster());\n        this.liveObjects.delete(objectToDelete);\n        this.idleObjects.add(objectToDelete);\n\n        this.collider.removeObjectFromGroup(objectToDelete, Groups.asteroids);\n    };\n\n    public update = () => {\n        this.liveObjects.forEach((object) => object.update());\n    };\n\n    public dispose = () => {\n        this.liveObjects.forEach((object) => this.scene.remove(object.mesh));\n        this.idleObjects.forEach((object) => this.scene.remove(object.mesh));\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from '../polyObject';\nimport { PolyClock } from '../../clock/PolyClock';\nimport { randomUnitVector, MathUtils, tooFarFromCenter } from '../../utils';\nimport { MissileMeshFactory } from './meshFactory';\nimport { DropFunction } from '../manager';\nimport { PolyHitbox } from '../hitbox';\n\nexport class FollowMissile implements PolyObject {\n    public mesh: THREE.Object3D;\n    public hitbox: PolyHitbox;\n\n    private direction: THREE.Vector3;\n    private clock: PolyClock;\n    private drop: () => void;\n\n    private angSpeed: number;\n    private speed: number;\n\n    constructor(\n        private object: THREE.Object3D,\n        meshFactory: MissileMeshFactory,\n        drop: DropFunction<FollowMissile>\n    ) {\n        this.clock = PolyClock.getInstance();\n\n        this.angSpeed = 3;\n        this.speed = 40;\n\n        this.mesh = meshFactory.buildMesh();\n        this.direction = randomUnitVector();\n\n        this.hitbox = new PolyHitbox(this.mesh, meshFactory.getHitboxGeometry());\n\n        this.drop = () => drop(this);\n    }\n\n    public spawn = (position: THREE.Vector3, direction: THREE.Vector3): void => {\n        this.mesh.position.copy(position);\n        this.direction.copy(direction);\n        this.direction.normalize();\n\n        this.align();\n    };\n\n    public update = (): void => {\n        this.updateRotation();\n        this.updatePosition();\n        this.updateFlames();\n\n        this.hitbox.update();\n\n        if (tooFarFromCenter(this.mesh.position)) {\n            this.drop();\n        }\n    };\n\n    public onCollide = (who: PolyObject): void => {\n        this.drop();\n    };\n\n    private updateRotation = (): void => {\n        const delta = this.clock.delta;\n\n        const towards = this.object.position.clone();\n        towards.sub(this.mesh.position);\n\n        const angle = this.direction.angleTo(towards);\n        const clampedAngle = MathUtils.clamp(angle, -this.angSpeed * delta, this.angSpeed * delta);\n\n        const normal = new THREE.Vector3().crossVectors(towards, this.direction);\n        normal.normalize();\n\n        this.direction.applyAxisAngle(normal, -clampedAngle);\n        this.align();\n    };\n\n    private updatePosition = (): void => {\n        const delta = this.clock.delta;\n\n        const step = this.direction.clone();\n        step.multiplyScalar(this.speed * delta);\n\n        this.mesh.position.add(step);\n    };\n\n    private updateFlames = (): void => {\n        const delta = this.clock.delta;\n        const elapsed = this.clock.elapsed;\n\n        this.mesh.children[0].scale.y += Math.sin(elapsed * 10) * 0.05;\n        this.mesh.children[0].rotateY(delta * 10);\n        this.mesh.children[1].scale.y -= Math.cos(elapsed * 10) * 0.05;\n        this.mesh.children[1].rotateY(delta * 10);\n    };\n\n    private align = (): void => {\n        const lookAtPos = this.mesh.position.clone();\n        lookAtPos.add(this.direction);\n        this.mesh.lookAt(lookAtPos);\n        this.mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\n    };\n}\n","import * as THREE from 'three';\nimport { MeshFactory } from '../meshFactory';\n\nexport class MissileMeshFactory implements MeshFactory {\n    private mesh: THREE.Mesh;\n    private hitboxGeometry: THREE.Geometry | THREE.BufferGeometry;\n\n    constructor() {\n        this.hitboxGeometry = new THREE.CylinderBufferGeometry(0.2, 0.4, 1, 6, 1);\n        const misilMaterial = new THREE.MeshBasicMaterial({\n            wireframe: true,\n            color: 0xffffff,\n        });\n\n        const fireGeom = new THREE.ConeBufferGeometry(0.3, 1, 6);\n\n        const lightFireMat = new THREE.MeshBasicMaterial({\n            wireframe: true,\n            color: 0xeeec74,\n        });\n\n        const darkFireMat = new THREE.MeshBasicMaterial({\n            wireframe: true,\n            color: 0xee5137,\n        });\n\n        const lightFire = new THREE.Mesh(fireGeom, lightFireMat);\n        const darkFire = new THREE.Mesh(fireGeom, darkFireMat);\n        lightFire.position.y -= 1;\n        darkFire.position.y -= 1;\n        lightFire.rotateX(Math.PI);\n        darkFire.rotateX(Math.PI);\n\n        this.mesh = new THREE.Mesh(this.hitboxGeometry, misilMaterial);\n        this.mesh.add(lightFire);\n        this.mesh.add(darkFire);\n    }\n\n    public buildMesh = (): THREE.Mesh => {\n        return this.mesh.clone();\n    };\n\n    public getHitboxGeometry = (): THREE.Geometry | THREE.BufferGeometry => {\n        return this.hitboxGeometry.clone();\n    };\n}\n","import { Vector3 } from 'three';\nimport { FollowMissile } from './followMissile';\nimport { PolyScene } from '../../scene/PolyScene';\nimport {\n    repeat,\n    getDumpster,\n    getOne,\n    assertExists,\n    randomUnitVector,\n    getOrigin,\n} from '../../utils';\nimport { MISSILES_IN_SCENE } from '../../constants';\nimport { Manager } from '../manager';\nimport { MissileMeshFactory } from './meshFactory';\nimport { PolyCollider, Groups } from '../../collider';\n\nexport class FollowMissileManager implements Manager<FollowMissile> {\n    private idleObjects: Set<FollowMissile>;\n    private liveObjects: Set<FollowMissile>;\n    private scene: PolyScene;\n    private meshFactory: MissileMeshFactory;\n\n    constructor(followedObject: THREE.Object3D, private collider: PolyCollider) {\n        this.idleObjects = new Set();\n        this.liveObjects = new Set();\n        this.scene = PolyScene.getInstance();\n        this.meshFactory = new MissileMeshFactory();\n\n        repeat(MISSILES_IN_SCENE, (_) => {\n            const object = new FollowMissile(followedObject, this.meshFactory, this.drop);\n            object.mesh.position.copy(getDumpster());\n            this.idleObjects.add(object);\n        });\n\n        this.idleObjects.forEach((object) => this.scene.add(object.mesh));\n\n        // For debug only\n        const initialPosition = getOrigin();\n        this.spawn(initialPosition, randomUnitVector());\n        setInterval(() => this.spawn(initialPosition, randomUnitVector()), 10000);\n    }\n\n    public spawn = (position: Vector3, direction: Vector3) => {\n        // If no available objects blow up. In the future we should do better.\n        // A FIFO structure that drops the oldest element and spawns the new one.\n        const objectToSpawn = assertExists(getOne(this.idleObjects));\n\n        this.idleObjects.delete(objectToSpawn);\n        this.liveObjects.add(objectToSpawn);\n\n        objectToSpawn.spawn(position, direction);\n\n        this.collider.addObjectToGroup(objectToSpawn, Groups.missiles);\n    };\n\n    public drop = (objectToDelete: FollowMissile) => {\n        objectToDelete.mesh.position.copy(getDumpster());\n        this.liveObjects.delete(objectToDelete);\n        this.idleObjects.add(objectToDelete);\n\n        this.collider.removeObjectFromGroup(objectToDelete, Groups.missiles);\n    };\n\n    public update = () => {\n        this.liveObjects.forEach((object) => object.update());\n    };\n\n    public dispose = () => {\n        this.liveObjects.forEach((object) => this.scene.remove(object.mesh));\n        this.idleObjects.forEach((object) => this.scene.remove(object.mesh));\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from '../polyObject';\nimport { Vector3 } from 'three';\nimport { PolyClock } from '../../clock/PolyClock';\nimport { DropFunction } from '../manager';\nimport { ShotMeshFactory } from './meshFactory';\nimport { CENTER_RADIUS } from '../../constants';\nimport { PolyHitbox } from '../hitbox';\n\nexport class Shot implements PolyObject {\n    public mesh: THREE.Object3D;\n    public hitbox: PolyHitbox;\n\n    private drop: () => void;\n    private speed: number;\n    private clock: PolyClock;\n\n    constructor(meshFactory: ShotMeshFactory, drop: DropFunction<Shot>) {\n        this.mesh = meshFactory.buildMesh();\n        this.hitbox = new PolyHitbox(this.mesh, meshFactory.getHitboxGeometry());\n\n        this.speed = 200;\n        this.clock = PolyClock.getInstance();\n        this.drop = () => drop(this);\n    }\n\n    public spawn = (position: Vector3): void => {\n        this.mesh.position.copy(position);\n    };\n\n    public onCollide = (who: PolyObject): void => {\n        this.drop();\n    };\n\n    public update = (): void => {\n        const { delta } = this.clock;\n\n        const currentLength = this.mesh.position.length();\n        const lengthOffset = this.speed * delta;\n        this.mesh.position.setLength(currentLength - lengthOffset);\n\n        this.hitbox.update();\n\n        if (this.mesh.position.length() <= CENTER_RADIUS) {\n            this.drop();\n        }\n    };\n}\n","import * as THREE from 'three';\nimport { MeshFactory } from '../meshFactory';\n\nexport class ShotMeshFactory implements MeshFactory {\n    private mesh: THREE.Mesh;\n    private hitboxGeometry: THREE.Geometry | THREE.BufferGeometry;\n\n    constructor() {\n        const coreGeometry = new THREE.DodecahedronBufferGeometry(0.15);\n        const coreMaterial = new THREE.MeshBasicMaterial({\n            color: 0xfff36e,\n            wireframe: true,\n        });\n\n        const coreMesh = new THREE.Mesh(coreGeometry, coreMaterial);\n\n        this.hitboxGeometry = new THREE.DodecahedronBufferGeometry(0.3);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xd68400,\n            wireframe: true,\n        });\n\n        this.mesh = new THREE.Mesh(this.hitboxGeometry, material);\n        this.mesh.add(coreMesh);\n    }\n\n    public buildMesh = (): THREE.Mesh => {\n        return this.mesh.clone();\n    };\n\n    public getHitboxGeometry = (): THREE.Geometry | THREE.BufferGeometry => {\n        return this.hitboxGeometry.clone();\n    };\n}\n","import { Vector3 } from 'three';\nimport { Shot } from './shot';\nimport { PolyScene } from '../../scene/PolyScene';\nimport { repeat, getDumpster, getOne, assertExists } from '../../utils';\nimport { SHOTS_IN_SCENE } from '../../constants';\nimport { Manager } from '../manager';\nimport { ShotMeshFactory } from './meshFactory';\nimport { PolyCollider, Groups } from '../../collider';\n\nexport class ShotManager implements Manager<Shot> {\n    private idleObjects: Set<Shot>;\n    private liveObjects: Set<Shot>;\n    private scene: PolyScene;\n    private meshFactory: ShotMeshFactory;\n\n    constructor(private collider: PolyCollider) {\n        this.idleObjects = new Set();\n        this.liveObjects = new Set();\n        this.scene = PolyScene.getInstance();\n        this.meshFactory = new ShotMeshFactory();\n\n        repeat(SHOTS_IN_SCENE, (_) => {\n            const object = new Shot(this.meshFactory, this.drop);\n            object.mesh.position.copy(getDumpster());\n            this.idleObjects.add(object);\n        });\n\n        this.idleObjects.forEach((object) => this.scene.add(object.mesh));\n    }\n\n    public spawn = (position: Vector3) => {\n        // If no available objects blow up. In the future we should do better.\n        // A FIFO structure that drops the oldest element and spawns the new one.\n        const objectToSpawn = assertExists(getOne(this.idleObjects));\n\n        this.idleObjects.delete(objectToSpawn);\n        this.liveObjects.add(objectToSpawn);\n\n        objectToSpawn.spawn(position);\n\n        this.collider.addObjectToGroup(objectToSpawn, Groups.shots);\n    };\n\n    public drop = (objectToDelete: Shot) => {\n        objectToDelete.mesh.position.copy(getDumpster());\n        this.liveObjects.delete(objectToDelete);\n        this.idleObjects.add(objectToDelete);\n\n        this.collider.removeObjectFromGroup(objectToDelete, Groups.shots);\n    };\n\n    public update = () => {\n        this.liveObjects.forEach((object) => object.update());\n    };\n\n    public dispose = () => {\n        this.liveObjects.forEach((object) => this.scene.remove(object.mesh));\n        this.idleObjects.forEach((object) => this.scene.remove(object.mesh));\n    };\n}\n","import { useEffect } from 'react';\nimport { Polybius } from '../game/polybius';\nimport { assertExists } from '../game/utils';\n\nconst polybius = new Polybius();\n\ntype CallbackRef = (element: HTMLElement | null) => void;\n\nexport const usePolybius = (): CallbackRef => {\n    useEffect(() => {\n        polybius.attachListeners();\n\n        return () => polybius.dispose();\n    }, []);\n\n    const callbackRef = (element: HTMLElement | null): void => {\n        assertExists(element).appendChild(polybius.getDomElement());\n    };\n\n    return callbackRef;\n};\n","import { Stars } from './objects/stars/stars';\nimport { consoleInfo } from './utils';\nimport { Center } from './objects/center';\nimport { KeyboardControls } from './controls/keyboardControls';\nimport { PolyClock } from './clock/PolyClock';\nimport { ObjectController } from './controls/objectController';\nimport { PolyShip } from './objects/ship/ship';\nimport { FollowCamera } from './objects/followCamera';\nimport { PolyRenderer } from './renderer';\nimport { PolyScene } from './scene/PolyScene';\nimport { AsteroidManager } from './objects/asteroid/manager';\nimport { FollowMissileManager } from './objects/followMissile/manager';\nimport { ShotManager } from './objects/shots/manager';\nimport { PolyCollider, Groups } from './collider';\n\nexport class Polybius {\n    private renderer: PolyRenderer;\n    private clock: PolyClock;\n    private camera: FollowCamera;\n    private controls: KeyboardControls;\n    private objectController: ObjectController;\n    private ship: PolyShip;\n    private scene: PolyScene;\n    private asteroids: AsteroidManager;\n    private missiles: FollowMissileManager;\n    private shots: ShotManager;\n    private collider: PolyCollider;\n\n    constructor() {\n        // Set up the scene\n        this.scene = PolyScene.getInstance();\n\n        // Set up the clock\n        this.clock = PolyClock.getInstance();\n\n        // Set up the collider\n        this.collider = new PolyCollider();\n        this.collider.addRule(Groups.asteroids, Groups.ship);\n        this.collider.addRule(Groups.shots, Groups.asteroids);\n        this.collider.addRule(Groups.shots, Groups.center);\n        this.collider.addRule(Groups.shots, Groups.missiles);\n        this.collider.addRule(Groups.missiles, Groups.ship);\n\n        // Set up the ship\n        this.ship = new PolyShip();\n        this.collider.addObjectToGroup(this.ship, Groups.ship);\n\n        // Set up camera\n        this.camera = new FollowCamera(this.ship.mesh);\n\n        // Set up the renderer\n        this.renderer = new PolyRenderer(this.scene.scene, this.camera);\n        this.renderer.resize();\n\n        // Set up various objects and managers\n        const stars = new Stars();\n        const center = new Center();\n        this.collider.addObjectToGroup(center, Groups.center);\n\n        this.scene.add(this.ship.mesh, stars.mesh, center.mesh);\n\n        this.asteroids = new AsteroidManager(this.collider);\n        this.missiles = new FollowMissileManager(this.ship.mesh, this.collider);\n        this.shots = new ShotManager(this.collider);\n\n        this.controls = new KeyboardControls();\n        this.objectController = new ObjectController(this.controls, this.ship.mesh, this.shots);\n\n        // Start the render loop!\n        consoleInfo('Game started!');\n        this.animate();\n    }\n\n    public attachListeners = (): void => {\n        this.controls.attachListeners();\n        window.addEventListener('resize', this.resize);\n    };\n\n    public dispose = (): void => {\n        this.controls.dispose();\n        this.asteroids.dispose();\n        this.missiles.dispose();\n        this.scene.dispose();\n        window.removeEventListener('resize', this.resize);\n    };\n\n    public getDomElement = (): HTMLCanvasElement => {\n        return this.renderer.getDomElement();\n    };\n\n    private resize = (): void => {\n        this.renderer.resize();\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n    };\n\n    // This function represents a frame. It's called once for every frame.\n    private animate = (): void => {\n        requestAnimationFrame(this.animate);\n        this.clock.tick();\n\n        this.objectController.update();\n        this.ship.update();\n\n        this.missiles.update();\n        this.asteroids.update();\n        this.shots.update();\n\n        this.collider.update();\n\n        this.camera.update();\n        this.renderer.render();\n    };\n}\n","import React from 'react';\nimport './App.scss';\nimport { usePolybius } from './hooks/usePolybius';\n\nfunction App() {\n    const polybiusRef = usePolybius();\n\n    return <div className=\"App\" ref={polybiusRef} />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}