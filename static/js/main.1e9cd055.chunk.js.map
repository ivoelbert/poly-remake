{"version":3,"sources":["game/controls/polyControls.ts","game/utils.ts","game/constants.ts","game/objects/stars.ts","game/objects/center.ts","game/controls/keyboardControls.ts","game/clock/PolyClock.ts","game/controls/objectController.ts","game/objects/ship.ts","game/objects/followCamera.ts","game/renderer.ts","game/scene/PolyScene.ts","game/objects/asteroid/asteroid.ts","game/objects/asteroid/meshFactory.ts","game/objects/asteroid/manager.ts","game/objects/followMissile/followMissile.ts","game/objects/followMissile/meshFactory.ts","game/objects/followMissile/manager.ts","game/objects/shots/shot.ts","game/objects/shots/meshFactory.ts","game/objects/shots/manager.ts","hooks/usePolybius.ts","game/polybius.ts","App.tsx","index.tsx"],"names":["Movements","repeat","THREE","times","f","i","MathUtils","randomUnitVector","Math","random","normalize","getDumpster","CENTER_RADIUS","isNil","value","undefined","assertExists","msg","UnexpectedNilError","Error","tooFarFromCenter","point","length","getOne","set","values","next","Stars","mesh","createStarsGeometry","starsGeometry","vertex","randFloat","distance","multiplyScalar","vertices","push","this","color","size","sizeAttenuation","forEach","material","geometry","stars","matrixAutoUpdate","updateMatrix","add","Center","wireframe","centerMesh","getIdleMoveState","up","down","left","right","forwards","backwards","rollLeft","rollRight","shoot","KeyboardControls","moveState","keyMapping","bindKey","key","movement","attachListeners","window","addEventListener","keyDownHandler","keyUpHandler","dispose","e","get","code","Map","getDefaultKeyMapping","PolyClock","clock","delta","elapsed","tick","getDelta","getElapsedTime","instance","getInstance","ObjectController","controls","object","shots","shotDelta","orbitSpeed","rollSpeed","forwardsAndBackwardsSpeed","inertiaFactor","shotRecoveryTime","update","moveState1","moveState2","factor","lerp","lerpMoveStates","updateDepth","updateOrbit","updateShots","depthMovement","abs","zOffset","objectRadius","position","setLength","xAxis","yAxis","zAxis","matrix","extractBasis","verticalOrbit","horizontalOrbit","verticalVector","clone","horizontalVector","directionVector","addVectors","clampLength","rotationAngle","applyAxisAngle","roll","copy","lookAt","spawn","PolyShip","createGeometry","frontPoint","backTop","backLeft","backRight","Float32Array","setAttribute","FollowCamera","followedObject","innerWidth","innerHeight","followedPosition","newPosition","lerpVectors","BLOOM_PARAMS","PolyRenderer","scene","camera","renderer","composer","getDomElement","domElement","resize","setSize","render","toneMappingExposure","pow","renderScene","RenderPass","bloomPass","UnrealBloomPass","threshold","strength","radius","EffectComposer","renderToScreen","addPass","PolyScene","remove","fog","light","Asteroid","meshFactory","drop","normal","angularVelocity","radialVelocity","angleToRotate","currentLength","lengthOffset","console","log","buildMesh","Vector3","AsteroidMeshFactory","AsteroidManager","idleObjects","liveObjects","objectToSpawn","delete","objectToDelete","Set","_","initialPosition","setInterval","FollowMissile","direction","angSpeed","speed","align","updateRotation","updatePosition","updateFlames","towards","sub","angle","angleTo","clampedAngle","clamp","crossVectors","step","children","scale","y","sin","rotateY","cos","lookAtPos","rotateOnAxis","PI","MissileMeshFactory","misilGeometry","misilMaterial","fireGeom","lightFireMat","darkFireMat","lightFire","darkFire","rotateX","FollowMissileManager","Shot","ShotMeshFactory","coreGeometry","coreMaterial","coreMesh","ShotManager","polybius","objectController","ship","asteroids","missiles","removeEventListener","aspect","updateProjectionMatrix","animate","requestAnimationFrame","message","center","App","polybiusRef","useEffect","element","appendChild","usePolybius","className","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e9cd055.chunk.js","sourcesContent":["import { MathUtils } from '../utils';\n\n// All posible inputs\nexport enum Movements {\n    up = 'up',\n    down = 'down',\n    left = 'left',\n    right = 'right',\n    forwards = 'forwards',\n    backwards = 'backwards',\n    rollLeft = 'rollLeft',\n    rollRight = 'rollRight',\n    shoot = 'shoot',\n}\n\n/**\n * for each possible movement we have a number in [0, 1] instead of a boolean\n * so we can support analog input\n */\nexport type MoveState = Record<Movements, number>;\n\nexport const getIdleMoveState = (): MoveState => ({\n    [Movements.up]: 0,\n    [Movements.down]: 0,\n    [Movements.left]: 0,\n    [Movements.right]: 0,\n    [Movements.forwards]: 0,\n    [Movements.backwards]: 0,\n    [Movements.rollLeft]: 0,\n    [Movements.rollRight]: 0,\n    [Movements.shoot]: 0,\n});\n\nexport const lerpMoveStates = (\n    moveState1: MoveState,\n    moveState2: MoveState,\n    factor: number\n): MoveState => ({\n    [Movements.up]: MathUtils.lerp(moveState1[Movements.up], moveState2[Movements.up], factor),\n    [Movements.down]: MathUtils.lerp(\n        moveState1[Movements.down],\n        moveState2[Movements.down],\n        factor\n    ),\n    [Movements.left]: MathUtils.lerp(\n        moveState1[Movements.left],\n        moveState2[Movements.left],\n        factor\n    ),\n    [Movements.right]: MathUtils.lerp(\n        moveState1[Movements.right],\n        moveState2[Movements.right],\n        factor\n    ),\n    [Movements.forwards]: MathUtils.lerp(\n        moveState1[Movements.forwards],\n        moveState2[Movements.forwards],\n        factor\n    ),\n    [Movements.backwards]: MathUtils.lerp(\n        moveState1[Movements.backwards],\n        moveState2[Movements.backwards],\n        factor\n    ),\n    [Movements.rollLeft]: MathUtils.lerp(\n        moveState1[Movements.rollLeft],\n        moveState2[Movements.rollLeft],\n        factor\n    ),\n    [Movements.rollRight]: MathUtils.lerp(\n        moveState1[Movements.rollRight],\n        moveState2[Movements.rollRight],\n        factor\n    ),\n    [Movements.shoot]: moveState2[Movements.shoot],\n});\n\n// All controls must expost a move state\nexport interface PolyControls {\n    moveState: MoveState;\n}\n","import * as THREE from 'three';\nimport { TOO_FAR_TO_CARE, CENTER_RADIUS } from './constants';\n\ntype RepeatFunction = (index: number) => void;\nexport const repeat = (times: number, f: RepeatFunction) => {\n    for (let i = 0; i < times; i++) {\n        f(i);\n    }\n};\n\nexport const MathUtils = THREE.MathUtils;\n\nexport const randomUnitVector = (): THREE.Vector3 => {\n    return new THREE.Vector3(Math.random(), Math.random(), Math.random()).normalize();\n};\n\nexport const getOrigin = (): THREE.Vector3 => {\n    return new THREE.Vector3(0, 0, 0);\n};\n\n// The dumpster has to be very, very far from the center so the camera doesn't catch it.\nconst DUMPSTER_POSITION = CENTER_RADIUS * 1000;\nexport const getDumpster = (): THREE.Vector3 => {\n    return new THREE.Vector3(DUMPSTER_POSITION, DUMPSTER_POSITION, DUMPSTER_POSITION);\n};\n\nexport type nil = undefined | null;\n\nexport const isNil = (value: any): value is nil => {\n    return value === undefined || value === null;\n};\n\nexport const assertExists = <T>(value: T | nil, msg?: string): T => {\n    if (isNil(value)) {\n        throw new UnexpectedNilError(msg);\n    } else {\n        return value;\n    }\n};\n\nexport class UnexpectedNilError extends Error {\n    constructor(msg?: string) {\n        super(msg ?? 'Unexpected nil value!');\n    }\n}\n\nexport const consoleInfo = (message: string): void => {\n    const styles = `\n        background-color: #dadada;\n        color: #2b2bfa;\n        margin: 1em;\n        padding: 0.5em 1em;\n        border-radius: 9999px;\n        font-size: 14px;\n        text-align: center;\n        font-weight: 800;\n    `;\n    console.log(`%c${message}`, styles);\n};\n\nexport const noop = () => {};\n\nexport const tooFarFromCenter = (point: THREE.Vector3) => point.length() > TOO_FAR_TO_CARE;\n\nexport const getOne = <T>(set: Set<T>): T | nil => {\n    return set.values().next().value;\n};\n","import * as THREE from 'three';\n\nexport const CENTER_RADIUS = 5;\nexport const MIN_RADIUS = 3 * CENTER_RADIUS;\nexport const MAX_RADIUS = 10 * CENTER_RADIUS;\n\nexport const CENTER = new THREE.Vector3();\nexport const TOO_FAR_TO_CARE = CENTER_RADIUS * 15;\n\nexport const ASTEROIDS_IN_SCENE = 50;\nexport const MISSILES_IN_SCENE = 50;\nexport const SHOTS_IN_SCENE = 20;\n","import * as THREE from 'three';\nimport { repeat, MathUtils } from '../utils';\nimport { CENTER_RADIUS } from '../constants';\nimport { PolyObject } from './polyObject';\n\nexport class Stars implements PolyObject {\n    public mesh: THREE.Group;\n\n    constructor() {\n        this.mesh = new THREE.Group();\n\n        const starsMaterials = [\n            new THREE.PointsMaterial({\n                color: 0x555555,\n                size: 2,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x555555,\n                size: 1,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x333333,\n                size: 2,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x3a3a3a,\n                size: 1,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x1a1a1a,\n                size: 2,\n                sizeAttenuation: false,\n            }),\n            new THREE.PointsMaterial({\n                color: 0x1a1a1a,\n                size: 1,\n                sizeAttenuation: false,\n            }),\n        ];\n\n        starsMaterials.forEach((material) => {\n            const geometry = this.createStarsGeometry();\n            const stars = new THREE.Points(geometry, material);\n            stars.matrixAutoUpdate = false;\n            stars.updateMatrix();\n\n            this.mesh.add(stars);\n        });\n    }\n\n    private createStarsGeometry = (): THREE.Geometry => {\n        const starsGeometry = new THREE.Geometry();\n\n        repeat(1000, (i: number) => {\n            const vertex = new THREE.Vector3(\n                MathUtils.randFloat(-1, 1),\n                MathUtils.randFloat(-1, 1),\n                MathUtils.randFloat(-1, 1)\n            );\n            const distance = MathUtils.randFloat(CENTER_RADIUS * 20, CENTER_RADIUS * 100);\n            vertex.multiplyScalar(distance);\n\n            starsGeometry.vertices.push(vertex);\n        });\n\n        return starsGeometry;\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from './polyObject';\nimport { CENTER_RADIUS } from '../constants';\n\nexport class Center implements PolyObject {\n    public mesh: THREE.Group;\n\n    constructor() {\n        this.mesh = new THREE.Group();\n\n        const geometry = new THREE.SphereBufferGeometry(CENTER_RADIUS, 16, 12);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xfa2b2b,\n            wireframe: true,\n        });\n\n        const centerMesh = new THREE.Mesh(geometry, material);\n        this.mesh.add(centerMesh);\n    }\n}\n","import { isNil } from '../utils';\nimport { Movements, MoveState, getIdleMoveState, PolyControls } from './polyControls';\n\n/**\n * PolyControls.\n *\n * This module takes care of binding keys to movements\n * and exposing an object that represents the current input\n * abstracted away from the actual keys that are being pressed\n */\n\n// Map movements to key 'code'\nexport type KeyMapping = Map<string, Movements>;\n\n// Default key binding\nexport const getDefaultKeyMapping = (): KeyMapping => {\n    const keyMapping = new Map();\n    keyMapping.set('KeyW', Movements.up);\n    keyMapping.set('KeyS', Movements.down);\n    keyMapping.set('KeyA', Movements.left);\n    keyMapping.set('KeyD', Movements.right);\n    keyMapping.set('KeyI', Movements.forwards);\n    keyMapping.set('KeyK', Movements.backwards);\n    keyMapping.set('KeyJ', Movements.rollLeft);\n    keyMapping.set('KeyL', Movements.rollRight);\n    keyMapping.set('Space', Movements.shoot);\n\n    return keyMapping;\n};\n\nexport class KeyboardControls implements PolyControls {\n    public moveState: MoveState;\n    private keyMapping: KeyMapping;\n\n    constructor() {\n        this.moveState = getIdleMoveState();\n        this.keyMapping = getDefaultKeyMapping();\n    }\n\n    // When binding a key reset the moveState to avoid locking buttons.\n    public bindKey = (key: string, movement: Movements): void => {\n        this.keyMapping.set(key, movement);\n        this.moveState = getIdleMoveState();\n    };\n\n    public attachListeners = (): void => {\n        window.addEventListener('keydown', this.keyDownHandler);\n        window.addEventListener('keyup', this.keyUpHandler);\n    };\n\n    public dispose = (): void => {\n        window.addEventListener('keydown', this.keyDownHandler);\n        window.addEventListener('keyup', this.keyUpHandler);\n    };\n\n    private keyDownHandler = (e: KeyboardEvent): void => {\n        const movement = this.keyMapping.get(e.code);\n\n        if (isNil(movement)) {\n            return;\n        }\n\n        this.moveState[movement] = 1;\n    };\n\n    private keyUpHandler = (e: KeyboardEvent): void => {\n        const movement = this.keyMapping.get(e.code);\n\n        if (isNil(movement)) {\n            return;\n        }\n\n        this.moveState[movement] = 0;\n    };\n}\n","import * as THREE from 'three';\n\n/**\n * Singleton clock, anyone can get the instance and check the delta time.\n *\n * The delta must be recomputed with `tick` on every render\n */\nexport class PolyClock {\n    private clock: THREE.Clock;\n    public delta: number;\n    public elapsed: number;\n    private static instance: PolyClock;\n\n    private constructor() {\n        // Autostarts\n        this.clock = new THREE.Clock();\n        this.delta = 0;\n        this.elapsed = 0;\n    }\n\n    static getInstance = (): PolyClock => {\n        if (!PolyClock.instance) {\n            PolyClock.instance = new PolyClock();\n        }\n\n        return PolyClock.instance;\n    };\n\n    public tick = (): void => {\n        this.delta = this.clock.getDelta();\n        this.elapsed = this.clock.getElapsedTime();\n    };\n}\n","import * as THREE from 'three';\nimport {\n    PolyControls,\n    Movements,\n    MoveState,\n    getIdleMoveState,\n    lerpMoveStates,\n} from './polyControls';\nimport { PolyClock } from '../clock/PolyClock';\nimport { MAX_RADIUS, MIN_RADIUS } from '../constants';\nimport { ShotManager } from '../objects/shots/manager';\n\n/**\n * Transforms an object based on the supplied controls\n */\nconst MOVEMENT_EPSILON = 0.00001;\n\nexport class ObjectController {\n    private clock: PolyClock;\n    private moveState: MoveState;\n    private shotDelta: number;\n\n    private orbitSpeed: number;\n    private rollSpeed: number;\n    private forwardsAndBackwardsSpeed: number;\n    private inertiaFactor: number;\n    private shotRecoveryTime: number;\n\n    constructor(\n        private controls: PolyControls,\n        private object: THREE.Object3D,\n        private shots: ShotManager\n    ) {\n        this.clock = PolyClock.getInstance();\n        this.moveState = getIdleMoveState();\n        this.shotDelta = 0;\n\n        this.orbitSpeed = 0.05;\n        this.rollSpeed = 0.05;\n        this.forwardsAndBackwardsSpeed = 0.5;\n        this.inertiaFactor = 0.1;\n        this.shotRecoveryTime = 0.15;\n\n        this.update();\n    }\n\n    // TODO: Make movement (and probably followCamera) frame independent\n    // See https://github.com/ivoelbert/poly-remake/ssues/2\n    public update = (): void => {\n        // Movement inertia\n        this.moveState = lerpMoveStates(\n            this.moveState,\n            this.controls.moveState,\n            this.inertiaFactor\n        );\n\n        this.updateDepth();\n        this.updateOrbit();\n        this.updateShots();\n    };\n\n    private updateDepth = (): void => {\n        const depthMovement =\n            this.moveState[Movements.backwards] - this.moveState[Movements.forwards];\n        if (Math.abs(depthMovement) > MOVEMENT_EPSILON) {\n            const zOffset = depthMovement * this.forwardsAndBackwardsSpeed;\n\n            let objectRadius = this.object.position.length();\n\n            if (objectRadius + zOffset < MIN_RADIUS) {\n                objectRadius = MIN_RADIUS;\n            } else if (objectRadius + zOffset > MAX_RADIUS) {\n                objectRadius = MAX_RADIUS;\n            } else {\n                objectRadius += zOffset;\n            }\n\n            this.object.position.setLength(objectRadius);\n        }\n    };\n\n    private updateOrbit = (): void => {\n        const xAxis = new THREE.Vector3();\n        const yAxis = new THREE.Vector3();\n        const zAxis = new THREE.Vector3();\n        this.object.matrix.extractBasis(xAxis, yAxis, zAxis);\n\n        const verticalOrbit = this.moveState[Movements.up] - this.moveState[Movements.down];\n        const horizontalOrbit = this.moveState[Movements.right] - this.moveState[Movements.left];\n\n        const verticalVector = xAxis.clone();\n        verticalVector.multiplyScalar(verticalOrbit);\n        const horizontalVector = yAxis.clone();\n        horizontalVector.multiplyScalar(horizontalOrbit);\n\n        const directionVector = new THREE.Vector3()\n            .addVectors(verticalVector, horizontalVector)\n            .clampLength(0, 1);\n        const rotationAngle = directionVector.length();\n\n        if (rotationAngle > MOVEMENT_EPSILON) {\n            directionVector.normalize();\n            this.object.position.applyAxisAngle(directionVector, rotationAngle * this.orbitSpeed);\n        }\n\n        const roll = this.moveState[Movements.rollRight] - this.moveState[Movements.rollLeft];\n        yAxis.applyAxisAngle(zAxis, roll * this.rollSpeed);\n        this.object.up.copy(yAxis);\n        this.object.lookAt(0, 0, 0);\n    };\n\n    private updateShots = (): void => {\n        const delta = this.clock.delta;\n        this.shotDelta += delta;\n\n        if (this.shotDelta > this.shotRecoveryTime && this.moveState[Movements.shoot] === 1) {\n            this.shotDelta = 0;\n            this.shots.spawn(this.object.position);\n        }\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from './polyObject';\nimport { MAX_RADIUS } from '../constants';\n\nexport class PolyShip implements PolyObject {\n    public mesh: THREE.Object3D;\n\n    constructor() {\n        const geometry = this.createGeometry();\n\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xfafafa,\n            wireframe: true,\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.position.set(0, 0, MAX_RADIUS);\n    }\n\n    private createGeometry = (): THREE.BufferGeometry => {\n        const geometry = new THREE.BufferGeometry();\n\n        const frontPoint = [0, 0, 1];\n        const backTop = [0, 0.25, 0];\n        const backLeft = [-0.5, -0.25, 0];\n        const backRight = [0.5, -0.25, 0];\n\n        const vertices = new Float32Array([\n            ...frontPoint,\n            ...backTop,\n            ...backLeft,\n\n            ...frontPoint,\n            ...backTop,\n            ...backRight,\n\n            ...frontPoint,\n            ...backLeft,\n            ...backRight,\n\n            ...backTop,\n            ...backLeft,\n            ...backRight,\n        ]);\n\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\n        return geometry;\n    };\n}\n","import * as THREE from 'three';\nimport { PolyClock } from '../clock/PolyClock';\n\nexport class FollowCamera extends THREE.PerspectiveCamera {\n    private clock: PolyClock;\n    private distance: number;\n    private inertiaFactor: number;\n\n    constructor(private followedObject: THREE.Object3D) {\n        super(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n        this.distance = 2;\n        this.inertiaFactor = 0.8;\n        this.clock = PolyClock.getInstance();\n\n        this.update();\n    }\n\n    // TODO: Make movement (and probably followCamera) frame independent\n    // See https://github.com/ivoelbert/poly-remake/issues/2\n    update = (): void => {\n        const followedPosition = this.followedObject.position.clone();\n        followedPosition.add(followedPosition.clone().normalize().multiplyScalar(this.distance));\n\n        const newPosition = new THREE.Vector3().lerpVectors(\n            this.position,\n            followedPosition,\n            this.inertiaFactor\n        );\n\n        this.position.copy(newPosition);\n        this.up.copy(this.followedObject.up);\n        this.lookAt(0, 0, 0);\n    };\n}\n","import * as THREE from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\n\nconst BLOOM_PARAMS = {\n    exposure: 1.05,\n    bloomStrength: 1.2,\n    bloomThreshold: 0,\n    bloomRadius: 0,\n};\n\nexport class PolyRenderer {\n    private renderer: THREE.WebGLRenderer;\n    private composer: EffectComposer;\n\n    constructor(scene: THREE.Scene, camera: THREE.Camera) {\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.toneMappingExposure = Math.pow(BLOOM_PARAMS.exposure, 4.0);\n\n        const renderScene = new RenderPass(scene, camera);\n\n        const bloomPass = new UnrealBloomPass(\n            new THREE.Vector2(window.innerWidth, window.innerHeight),\n            1.5,\n            0.4,\n            0.85\n        );\n        bloomPass.threshold = BLOOM_PARAMS.bloomThreshold;\n        bloomPass.strength = BLOOM_PARAMS.bloomStrength;\n        bloomPass.radius = BLOOM_PARAMS.bloomRadius;\n\n        this.composer = new EffectComposer(this.renderer);\n        this.composer.renderToScreen = false;\n        this.composer.addPass(renderScene);\n        this.composer.addPass(bloomPass);\n\n        this.composer.renderToScreen = true;\n    }\n\n    public getDomElement = (): HTMLCanvasElement => {\n        return this.renderer.domElement;\n    };\n\n    public resize = (): void => {\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.composer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    public render = (): void => {\n        this.composer.render();\n    };\n}\n","import * as THREE from 'three';\n\nexport class PolyScene {\n    public readonly scene: THREE.Scene;\n    private static instance: PolyScene;\n\n    private constructor() {\n        this.scene = new THREE.Scene();\n        this.scene.fog = new THREE.FogExp2(0x000000, 0.000025);\n\n        const light = new THREE.AmbientLight(0xffffff);\n        this.scene.add(light);\n    }\n\n    static getInstance = (): PolyScene => {\n        if (!PolyScene.instance) {\n            PolyScene.instance = new PolyScene();\n        }\n\n        return PolyScene.instance;\n    };\n\n    public add = (...objects: THREE.Object3D[]) => this.scene.add(...objects);\n\n    public remove = (...objects: THREE.Object3D[]) => this.scene.remove(...objects);\n\n    public dispose = () => this.scene.dispose();\n}\n","import * as THREE from 'three';\nimport { PolyObject } from '../polyObject';\nimport { Vector3 } from 'three';\nimport { PolyClock } from '../../clock/PolyClock';\nimport { tooFarFromCenter } from '../../utils';\nimport { DropFunction } from '../manager';\nimport { AsteroidMeshFactory } from './meshFactory';\n\nexport class Asteroid implements PolyObject {\n    public mesh: THREE.Object3D;\n    private normal: Vector3;\n    private drop: () => void;\n    private angularVelocity: number;\n    private radialVelocity: number;\n    private clock: PolyClock;\n\n    constructor(meshFactory: AsteroidMeshFactory, drop: DropFunction<Asteroid>) {\n        this.mesh = meshFactory.buildMesh();\n        this.normal = new Vector3(0, 1, 0);\n\n        this.angularVelocity = 1;\n        this.radialVelocity = 1;\n        this.clock = PolyClock.getInstance();\n        this.drop = () => drop(this);\n    }\n\n    public spawn = (position: Vector3, normal: Vector3): void => {\n        this.mesh.position.copy(position);\n        this.normal = normal;\n    };\n\n    public update = (): void => {\n        const { delta } = this.clock;\n        // Rotation\n        const angleToRotate = this.angularVelocity * delta;\n        this.mesh.position.applyAxisAngle(this.normal, angleToRotate);\n\n        // radial movement\n        const currentLength = this.mesh.position.length();\n        const lengthOffset = this.radialVelocity * delta;\n        this.mesh.position.setLength(currentLength + lengthOffset);\n\n        if (tooFarFromCenter(this.mesh.position)) {\n            console.log('dropping asteroid!');\n            this.drop();\n        }\n    };\n}\n","import * as THREE from 'three';\nimport { MeshFactory } from '../meshFactory';\n\nexport class AsteroidMeshFactory implements MeshFactory {\n    private mesh: THREE.Mesh;\n\n    constructor() {\n        const geometry = new THREE.DodecahedronBufferGeometry(1);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0x2bfa2b,\n            wireframe: true,\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n    }\n\n    public buildMesh = (): THREE.Mesh => {\n        return this.mesh.clone();\n    };\n}\n","import { Vector3 } from 'three';\nimport { Asteroid } from './asteroid';\nimport { PolyScene } from '../../scene/PolyScene';\nimport { repeat, getDumpster, randomUnitVector, assertExists, getOne } from '../../utils';\nimport { ASTEROIDS_IN_SCENE, MIN_RADIUS } from '../../constants';\nimport { Manager } from '../manager';\nimport { AsteroidMeshFactory } from './meshFactory';\n\nexport class AsteroidManager implements Manager<Asteroid> {\n    private idleObjects: Set<Asteroid>;\n    private liveObjects: Set<Asteroid>;\n    private scene: PolyScene;\n    private meshFactory: AsteroidMeshFactory;\n\n    constructor() {\n        this.idleObjects = new Set();\n        this.liveObjects = new Set();\n        this.scene = PolyScene.getInstance();\n        this.meshFactory = new AsteroidMeshFactory();\n\n        repeat(ASTEROIDS_IN_SCENE, (_) => {\n            const object = new Asteroid(this.meshFactory, this.drop);\n            object.mesh.position.copy(getDumpster());\n            this.idleObjects.add(object);\n        });\n\n        this.idleObjects.forEach((object) => this.scene.add(object.mesh));\n\n        // For debug only\n        const initialPosition = new Vector3(0, MIN_RADIUS, 0);\n        this.spawn(initialPosition, randomUnitVector());\n        setInterval(() => this.spawn(initialPosition, randomUnitVector()), 10000);\n    }\n\n    public spawn = (position: Vector3, normal: Vector3) => {\n        // If no available objects blow up. In the future we should do better.\n        // A FIFO structure that drops the oldest element and spawns the new one.\n        const objectToSpawn = assertExists(getOne(this.idleObjects));\n\n        this.idleObjects.delete(objectToSpawn);\n        this.liveObjects.add(objectToSpawn);\n\n        objectToSpawn.spawn(position, normal);\n    };\n\n    public drop = (objectToDelete: Asteroid) => {\n        objectToDelete.mesh.position.copy(getDumpster());\n        this.liveObjects.delete(objectToDelete);\n        this.idleObjects.add(objectToDelete);\n    };\n\n    public update = () => {\n        this.liveObjects.forEach((object) => object.update());\n    };\n\n    public dispose = () => {\n        this.liveObjects.forEach((object) => this.scene.remove(object.mesh));\n        this.idleObjects.forEach((object) => this.scene.remove(object.mesh));\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from '../polyObject';\nimport { PolyClock } from '../../clock/PolyClock';\nimport { randomUnitVector, MathUtils, tooFarFromCenter } from '../../utils';\nimport { MissileMeshFactory } from './meshFactory';\nimport { DropFunction } from '../manager';\n\nexport class FollowMissile implements PolyObject {\n    public mesh: THREE.Object3D;\n    private direction: THREE.Vector3;\n    private clock: PolyClock;\n    private drop: () => void;\n\n    private angSpeed: number;\n    private speed: number;\n\n    constructor(\n        private object: THREE.Object3D,\n        meshFactory: MissileMeshFactory,\n        drop: DropFunction<FollowMissile>\n    ) {\n        this.clock = PolyClock.getInstance();\n\n        this.angSpeed = 3;\n        this.speed = 40;\n\n        this.mesh = meshFactory.buildMesh();\n        this.direction = randomUnitVector();\n\n        this.drop = () => drop(this);\n    }\n\n    public spawn = (position: THREE.Vector3, direction: THREE.Vector3): void => {\n        this.mesh.position.copy(position);\n        this.direction.copy(direction);\n        this.direction.normalize();\n\n        this.align();\n    };\n\n    public update = (): void => {\n        this.updateRotation();\n        this.updatePosition();\n        this.updateFlames();\n\n        if (tooFarFromCenter(this.mesh.position)) {\n            this.drop();\n        }\n    };\n\n    private updateRotation = (): void => {\n        const delta = this.clock.delta;\n\n        const towards = this.object.position.clone();\n        towards.sub(this.mesh.position);\n\n        const angle = this.direction.angleTo(towards);\n        const clampedAngle = MathUtils.clamp(angle, -this.angSpeed * delta, this.angSpeed * delta);\n\n        const normal = new THREE.Vector3().crossVectors(towards, this.direction);\n        normal.normalize();\n\n        this.direction.applyAxisAngle(normal, -clampedAngle);\n        this.align();\n    };\n\n    private updatePosition = (): void => {\n        const delta = this.clock.delta;\n\n        const step = this.direction.clone();\n        step.multiplyScalar(this.speed * delta);\n\n        this.mesh.position.add(step);\n    };\n\n    private updateFlames = (): void => {\n        const delta = this.clock.delta;\n        const elapsed = this.clock.elapsed;\n\n        this.mesh.children[0].scale.y += Math.sin(elapsed * 10) * 0.05;\n        this.mesh.children[0].rotateY(delta * 10);\n        this.mesh.children[1].scale.y -= Math.cos(elapsed * 10) * 0.05;\n        this.mesh.children[1].rotateY(delta * 10);\n    };\n\n    private align = (): void => {\n        const lookAtPos = this.mesh.position.clone();\n        lookAtPos.add(this.direction);\n        this.mesh.lookAt(lookAtPos);\n        this.mesh.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI * 0.5);\n    };\n}\n","import * as THREE from 'three';\nimport { MeshFactory } from '../meshFactory';\n\nexport class MissileMeshFactory implements MeshFactory {\n    private mesh: THREE.Mesh;\n\n    constructor() {\n        const misilGeometry = new THREE.CylinderBufferGeometry(0.2, 0.4, 1, 6, 1);\n        const misilMaterial = new THREE.MeshBasicMaterial({\n            wireframe: true,\n            color: 0xffffff,\n        });\n\n        const fireGeom = new THREE.ConeBufferGeometry(0.3, 1, 6);\n\n        const lightFireMat = new THREE.MeshBasicMaterial({\n            wireframe: true,\n            color: 0xeeec74,\n        });\n\n        const darkFireMat = new THREE.MeshBasicMaterial({\n            wireframe: true,\n            color: 0xee5137,\n        });\n\n        const lightFire = new THREE.Mesh(fireGeom, lightFireMat);\n        const darkFire = new THREE.Mesh(fireGeom, darkFireMat);\n        lightFire.position.y -= 1;\n        darkFire.position.y -= 1;\n        lightFire.rotateX(Math.PI);\n        darkFire.rotateX(Math.PI);\n\n        this.mesh = new THREE.Mesh(misilGeometry, misilMaterial);\n        this.mesh.add(lightFire);\n        this.mesh.add(darkFire);\n    }\n\n    public buildMesh = (): THREE.Mesh => {\n        return this.mesh.clone();\n    };\n}\n","import { Vector3 } from 'three';\nimport { FollowMissile } from './followMissile';\nimport { PolyScene } from '../../scene/PolyScene';\nimport {\n    repeat,\n    getDumpster,\n    getOne,\n    assertExists,\n    randomUnitVector,\n    getOrigin,\n} from '../../utils';\nimport { MISSILES_IN_SCENE } from '../../constants';\nimport { Manager } from '../manager';\nimport { MissileMeshFactory } from './meshFactory';\n\nexport class FollowMissileManager implements Manager<FollowMissile> {\n    private idleObjects: Set<FollowMissile>;\n    private liveObjects: Set<FollowMissile>;\n    private scene: PolyScene;\n    private meshFactory: MissileMeshFactory;\n\n    constructor(followedObject: THREE.Object3D) {\n        this.idleObjects = new Set();\n        this.liveObjects = new Set();\n        this.scene = PolyScene.getInstance();\n        this.meshFactory = new MissileMeshFactory();\n\n        repeat(MISSILES_IN_SCENE, (_) => {\n            const object = new FollowMissile(followedObject, this.meshFactory, this.drop);\n            object.mesh.position.copy(getDumpster());\n            this.idleObjects.add(object);\n        });\n\n        this.idleObjects.forEach((object) => this.scene.add(object.mesh));\n\n        // For debug only\n        const initialPosition = getOrigin();\n        this.spawn(initialPosition, randomUnitVector());\n        setInterval(() => this.spawn(initialPosition, randomUnitVector()), 10000);\n    }\n\n    public spawn = (position: Vector3, direction: Vector3) => {\n        // If no available objects blow up. In the future we should do better.\n        // A FIFO structure that drops the oldest element and spawns the new one.\n        const objectToSpawn = assertExists(getOne(this.idleObjects));\n\n        this.idleObjects.delete(objectToSpawn);\n        this.liveObjects.add(objectToSpawn);\n\n        objectToSpawn.spawn(position, direction);\n    };\n\n    public drop = (objectToDelete: FollowMissile) => {\n        objectToDelete.mesh.position.copy(getDumpster());\n        this.liveObjects.delete(objectToDelete);\n        this.idleObjects.add(objectToDelete);\n    };\n\n    public update = () => {\n        this.liveObjects.forEach((object) => object.update());\n    };\n\n    public dispose = () => {\n        this.liveObjects.forEach((object) => this.scene.remove(object.mesh));\n        this.idleObjects.forEach((object) => this.scene.remove(object.mesh));\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from '../polyObject';\nimport { Vector3 } from 'three';\nimport { PolyClock } from '../../clock/PolyClock';\nimport { DropFunction } from '../manager';\nimport { ShotMeshFactory } from './meshFactory';\nimport { CENTER_RADIUS } from '../../constants';\n\nexport class Shot implements PolyObject {\n    public mesh: THREE.Object3D;\n    private drop: () => void;\n    private speed: number;\n    private clock: PolyClock;\n\n    constructor(meshFactory: ShotMeshFactory, drop: DropFunction<Shot>) {\n        this.mesh = meshFactory.buildMesh();\n\n        this.speed = 200;\n        this.clock = PolyClock.getInstance();\n        this.drop = () => drop(this);\n    }\n\n    public spawn = (position: Vector3): void => {\n        this.mesh.position.copy(position);\n    };\n\n    public update = (): void => {\n        const { delta } = this.clock;\n\n        const currentLength = this.mesh.position.length();\n        const lengthOffset = this.speed * delta;\n        this.mesh.position.setLength(currentLength - lengthOffset);\n\n        if (this.mesh.position.length() <= CENTER_RADIUS) {\n            this.drop();\n        }\n    };\n}\n","import * as THREE from 'three';\nimport { MeshFactory } from '../meshFactory';\n\nexport class ShotMeshFactory implements MeshFactory {\n    private mesh: THREE.Mesh;\n\n    constructor() {\n        const coreGeometry = new THREE.DodecahedronBufferGeometry(0.15);\n        const coreMaterial = new THREE.MeshBasicMaterial({\n            color: 0xfff36e,\n            wireframe: true,\n        });\n\n        const coreMesh = new THREE.Mesh(coreGeometry, coreMaterial);\n\n        const geometry = new THREE.DodecahedronBufferGeometry(0.3);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xd68400,\n            wireframe: true,\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.add(coreMesh);\n    }\n\n    public buildMesh = (): THREE.Mesh => {\n        return this.mesh.clone();\n    };\n}\n","import { Vector3 } from 'three';\nimport { Shot } from './shot';\nimport { PolyScene } from '../../scene/PolyScene';\nimport { repeat, getDumpster, getOne, assertExists } from '../../utils';\nimport { SHOTS_IN_SCENE } from '../../constants';\nimport { Manager } from '../manager';\nimport { ShotMeshFactory } from './meshFactory';\n\nexport class ShotManager implements Manager<Shot> {\n    private idleObjects: Set<Shot>;\n    private liveObjects: Set<Shot>;\n    private scene: PolyScene;\n    private meshFactory: ShotMeshFactory;\n\n    constructor() {\n        this.idleObjects = new Set();\n        this.liveObjects = new Set();\n        this.scene = PolyScene.getInstance();\n        this.meshFactory = new ShotMeshFactory();\n\n        repeat(SHOTS_IN_SCENE, (_) => {\n            const object = new Shot(this.meshFactory, this.drop);\n            object.mesh.position.copy(getDumpster());\n            this.idleObjects.add(object);\n        });\n\n        this.idleObjects.forEach((object) => this.scene.add(object.mesh));\n    }\n\n    public spawn = (position: Vector3) => {\n        // If no available objects blow up. In the future we should do better.\n        // A FIFO structure that drops the oldest element and spawns the new one.\n        const objectToSpawn = assertExists(getOne(this.idleObjects));\n\n        this.idleObjects.delete(objectToSpawn);\n        this.liveObjects.add(objectToSpawn);\n\n        objectToSpawn.spawn(position);\n    };\n\n    public drop = (objectToDelete: Shot) => {\n        objectToDelete.mesh.position.copy(getDumpster());\n        this.liveObjects.delete(objectToDelete);\n        this.idleObjects.add(objectToDelete);\n    };\n\n    public update = () => {\n        this.liveObjects.forEach((object) => object.update());\n    };\n\n    public dispose = () => {\n        this.liveObjects.forEach((object) => this.scene.remove(object.mesh));\n        this.idleObjects.forEach((object) => this.scene.remove(object.mesh));\n    };\n}\n","import { useEffect } from 'react';\nimport { Polybius } from '../game/polybius';\nimport { assertExists } from '../game/utils';\n\nconst polybius = new Polybius();\n\ntype CallbackRef = (element: HTMLElement | null) => void;\n\nexport const usePolybius = (): CallbackRef => {\n    useEffect(() => {\n        polybius.attachListeners();\n\n        return () => polybius.dispose();\n    }, []);\n\n    const callbackRef = (element: HTMLElement | null): void => {\n        assertExists(element).appendChild(polybius.getDomElement());\n    };\n\n    return callbackRef;\n};\n","import { Stars } from './objects/stars';\nimport { consoleInfo } from './utils';\nimport { Center } from './objects/center';\nimport { KeyboardControls } from './controls/keyboardControls';\nimport { PolyClock } from './clock/PolyClock';\nimport { ObjectController } from './controls/objectController';\nimport { PolyShip } from './objects/ship';\nimport { FollowCamera } from './objects/followCamera';\nimport { PolyRenderer } from './renderer';\nimport { PolyScene } from './scene/PolyScene';\nimport { AsteroidManager } from './objects/asteroid/manager';\nimport { FollowMissileManager } from './objects/followMissile/manager';\nimport { ShotManager } from './objects/shots/manager';\n\nexport class Polybius {\n    private renderer: PolyRenderer;\n    private clock: PolyClock;\n    private camera: FollowCamera;\n    private controls: KeyboardControls;\n    private objectController: ObjectController;\n    private ship: PolyShip;\n    private scene: PolyScene;\n    private asteroids: AsteroidManager;\n    private missiles: FollowMissileManager;\n    private shots: ShotManager;\n\n    constructor() {\n        // Set up the scene\n        this.scene = PolyScene.getInstance();\n        // Set up the clock\n        this.clock = PolyClock.getInstance();\n\n        // Set up the ship\n        this.ship = new PolyShip();\n\n        // Set up camera\n        this.camera = new FollowCamera(this.ship.mesh);\n\n        // Set up the renderer\n        this.renderer = new PolyRenderer(this.scene.scene, this.camera);\n        this.renderer.resize();\n\n        const stars = new Stars();\n        const center = new Center();\n\n        this.scene.add(this.ship.mesh, stars.mesh, center.mesh);\n\n        this.asteroids = new AsteroidManager();\n        this.missiles = new FollowMissileManager(this.ship.mesh);\n        this.shots = new ShotManager();\n\n        this.controls = new KeyboardControls();\n        this.objectController = new ObjectController(this.controls, this.ship.mesh, this.shots);\n\n        // Start the render loop!\n        consoleInfo('Game started!');\n        this.animate();\n    }\n\n    public attachListeners = (): void => {\n        this.controls.attachListeners();\n        window.addEventListener('resize', this.resize);\n    };\n\n    public dispose = (): void => {\n        this.controls.dispose();\n        this.asteroids.dispose();\n        this.missiles.dispose();\n        window.removeEventListener('resize', this.resize);\n    };\n\n    public getDomElement = (): HTMLCanvasElement => {\n        return this.renderer.getDomElement();\n    };\n\n    private resize = (): void => {\n        this.renderer.resize();\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n    };\n\n    // This function represents a frame. It's called once for every frame.\n    private animate = (): void => {\n        requestAnimationFrame(this.animate);\n        this.clock.tick();\n\n        this.objectController.update();\n        this.camera.update();\n\n        this.missiles.update();\n        this.asteroids.update();\n        this.shots.update();\n\n        this.renderer.render();\n    };\n}\n","import React from 'react';\nimport './App.scss';\nimport { usePolybius } from './hooks/usePolybius';\n\nfunction App() {\n    const polybiusRef = usePolybius();\n\n    return <div className=\"App\" ref={polybiusRef} />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}