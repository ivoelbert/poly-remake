{"version":3,"sources":["game/controls/polyControls.ts","game/utils.ts","game/objects/stars.ts","game/objects/center.ts","game/constants.ts","game/controls/keyboardControls.ts","game/clock/PolyClock.ts","game/controls/objectController.ts","game/objects/ship.ts","game/objects/followCamera.ts","game/renderer.ts","hooks/usePolybius.ts","game/polybius.ts","App.tsx","index.tsx"],"names":["Movements","MathUtils","THREE","isNil","value","undefined","UnexpectedNilError","msg","Error","Stars","mesh","createStarsGeometry","starsGeometry","times","f","i","repeat","vertex","randFloat","distance","CENTER_RADIUS","multiplyScalar","vertices","push","this","color","size","sizeAttenuation","forEach","material","geometry","stars","matrixAutoUpdate","updateMatrix","add","Center","wireframe","centerMesh","getIdleMoveState","up","down","left","right","forwards","backwards","rollLeft","rollRight","shoot","KeyboardControls","moveState","keyMapping","bindKey","key","movement","set","attachListeners","window","addEventListener","keyDownHandler","keyUpHandler","dispose","e","get","code","Map","getDefaultKeyMapping","PolyClock","clock","delta","tick","getDelta","instance","getInstance","ObjectController","controls","object","orbitSpeed","rollSpeed","forwardsAndBackwardsSpeed","inertiaFactor","update","moveState1","moveState2","factor","lerp","lerpMoveStates","depthMovement","Math","abs","zOffset","objectRadius","position","length","setLength","xAxis","yAxis","zAxis","matrix","extractBasis","verticalOrbit","horizontalOrbit","verticalVector","clone","horizontalVector","directionVector","addVectors","clampLength","rotationAngle","normalize","applyAxisAngle","roll","copy","lookAt","PolyShip","createGeometry","frontPoint","backTop","backLeft","backRight","Float32Array","setAttribute","FollowCamera","followedObject","innerWidth","innerHeight","followedPosition","newPosition","lerpVectors","BLOOM_PARAMS","PolyRenderer","scene","camera","renderer","composer","getDomElement","domElement","resize","setSize","render","toneMappingExposure","pow","renderScene","RenderPass","bloomPass","UnrealBloomPass","threshold","strength","radius","EffectComposer","renderToScreen","addPass","polybius","objectController","ship","removeEventListener","aspect","updateProjectionMatrix","animate","requestAnimationFrame","fog","light","message","center","console","log","usePolybius","useEffect","element","assertExists","appendChild","App","polybiusRef","className","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.416ab62c.chunk.js","sourcesContent":["import { MathUtils } from '../utils';\n\n// All posible inputs\nexport enum Movements {\n    up = 'up',\n    down = 'down',\n    left = 'left',\n    right = 'right',\n    forwards = 'forwards',\n    backwards = 'backwards',\n    rollLeft = 'rollLeft',\n    rollRight = 'rollRight',\n    shoot = 'shoot',\n}\n\n/**\n * for each possible movement we have a number in [0, 1] instead of a boolean\n * so we can support analog input\n */\nexport type MoveState = Record<Movements, number>;\n\nexport const getIdleMoveState = (): MoveState => ({\n    [Movements.up]: 0,\n    [Movements.down]: 0,\n    [Movements.left]: 0,\n    [Movements.right]: 0,\n    [Movements.forwards]: 0,\n    [Movements.backwards]: 0,\n    [Movements.rollLeft]: 0,\n    [Movements.rollRight]: 0,\n    [Movements.shoot]: 0,\n});\n\nexport const lerpMoveStates = (moveState1: MoveState, moveState2: MoveState, factor: number): MoveState => ({\n    [Movements.up]: MathUtils.lerp(moveState1[Movements.up], moveState2[Movements.up], factor),\n    [Movements.down]: MathUtils.lerp(moveState1[Movements.down], moveState2[Movements.down], factor),\n    [Movements.left]: MathUtils.lerp(moveState1[Movements.left], moveState2[Movements.left], factor),\n    [Movements.right]: MathUtils.lerp(moveState1[Movements.right], moveState2[Movements.right], factor),\n    [Movements.forwards]: MathUtils.lerp(moveState1[Movements.forwards], moveState2[Movements.forwards], factor),\n    [Movements.backwards]: MathUtils.lerp(moveState1[Movements.backwards], moveState2[Movements.backwards], factor),\n    [Movements.rollLeft]: MathUtils.lerp(moveState1[Movements.rollLeft], moveState2[Movements.rollLeft], factor),\n    [Movements.rollRight]: MathUtils.lerp(moveState1[Movements.rollRight], moveState2[Movements.rollRight], factor),\n    [Movements.shoot]: moveState2[Movements.shoot],\n});\n\n// All controls must expost a move state\nexport interface PolyControls {\n    moveState: MoveState;\n}\n","import * as THREE from 'three';\n\ntype RepeatFunction = (index: number) => void;\nexport const repeat = (times: number, f: RepeatFunction) => {\n    for (let i = 0; i < times; i++) {\n        f(i);\n    }\n};\n\nexport const MathUtils = THREE.MathUtils;\n\nexport type nil = undefined | null;\n\nexport const isNil = (value: any): value is nil => {\n    return value === undefined || value === null;\n};\n\nexport const assertExists = <T>(value: T | nil, msg?: string): T => {\n    if (isNil(value)) {\n        throw new UnexpectedNilError(msg);\n    } else {\n        return value;\n    }\n};\n\nexport class UnexpectedNilError extends Error {\n    constructor(msg?: string) {\n        super(msg ?? 'Unexpected nil value!');\n    }\n}\n\nexport const consoleInfo = (message: string): void => {\n    const styles = `\n        background-color: #dadada;\n        color: #2b2bfa;\n        margin: 1em;\n        padding: 0.5em 1em;\n        border-radius: 9999px;\n        font-size: 14px;\n        text-align: center;\n        font-weight: 800;\n    `\n    console.log(`%c${message}`, styles)\n}\n\nexport const noop = () => {}","import * as THREE from 'three';\nimport { repeat, MathUtils } from '../utils';\nimport { CENTER_RADIUS } from '../constants';\nimport { PolyObject } from './polyObject';\n\nexport class Stars implements PolyObject {\n    public mesh: THREE.Group;\n\n    constructor() {\n        this.mesh = new THREE.Group();\n\n        const starsMaterials = [\n            new THREE.PointsMaterial({ color: 0x555555, size: 2, sizeAttenuation: false }),\n            new THREE.PointsMaterial({ color: 0x555555, size: 1, sizeAttenuation: false }),\n            new THREE.PointsMaterial({ color: 0x333333, size: 2, sizeAttenuation: false }),\n            new THREE.PointsMaterial({ color: 0x3a3a3a, size: 1, sizeAttenuation: false }),\n            new THREE.PointsMaterial({ color: 0x1a1a1a, size: 2, sizeAttenuation: false }),\n            new THREE.PointsMaterial({ color: 0x1a1a1a, size: 1, sizeAttenuation: false }),\n        ];\n\n        starsMaterials.forEach((material) => {\n            const geometry = this.createStarsGeometry();\n            const stars = new THREE.Points(geometry, material);\n            stars.matrixAutoUpdate = false;\n            stars.updateMatrix();\n\n            this.mesh.add(stars);\n        });\n    }\n\n    private createStarsGeometry = (): THREE.Geometry => {\n        const starsGeometry = new THREE.Geometry();\n\n        repeat(1000, (i: number) => {\n            const vertex = new THREE.Vector3(MathUtils.randFloat(-1, 1), MathUtils.randFloat(-1, 1), MathUtils.randFloat(-1, 1));\n            const distance = MathUtils.randFloat(CENTER_RADIUS * 20, CENTER_RADIUS * 100);\n            vertex.multiplyScalar(distance);\n\n            starsGeometry.vertices.push(vertex);\n        });\n\n        return starsGeometry;\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from './polyObject';\nimport { CENTER_RADIUS } from '../constants';\n\nexport class Center implements PolyObject {\n    public mesh: THREE.Group;\n\n    constructor() {\n        this.mesh = new THREE.Group();\n\n        const geometry = new THREE.SphereBufferGeometry(CENTER_RADIUS, 16, 12);\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xfa2b2b,\n            wireframe: true,\n        });\n\n        const centerMesh = new THREE.Mesh(geometry, material);\n\n        this.mesh.add(centerMesh);\n    }\n}\n","export const CENTER_RADIUS = 5;\nexport const MIN_RADIUS = 3 * CENTER_RADIUS;\nexport const MAX_RADIUS = 10 * CENTER_RADIUS;\n","import { isNil } from '../utils';\nimport { Movements, MoveState, getIdleMoveState, PolyControls } from './polyControls';\n\n/**\n * PolyControls.\n *\n * This module takes care of binding keys to movements\n * and exposing an object that represents the current input\n * abstracted away from the actual keys that are being pressed\n */\n\n// Map movements to key 'code'\nexport type KeyMapping = Map<string, Movements>;\n\n// Default key binding\nexport const getDefaultKeyMapping = (): KeyMapping => {\n    const keyMapping = new Map();\n    keyMapping.set('KeyW', Movements.up);\n    keyMapping.set('KeyS', Movements.down);\n    keyMapping.set('KeyA', Movements.left);\n    keyMapping.set('KeyD', Movements.right);\n    keyMapping.set('KeyI', Movements.forwards);\n    keyMapping.set('KeyK', Movements.backwards);\n    keyMapping.set('KeyJ', Movements.rollLeft);\n    keyMapping.set('KeyL', Movements.rollRight);\n    keyMapping.set('Space', Movements.shoot);\n\n    return keyMapping;\n};\n\nexport class KeyboardControls implements PolyControls {\n    public moveState: MoveState;\n    private keyMapping: KeyMapping;\n\n    constructor() {\n        this.moveState = getIdleMoveState();\n        this.keyMapping = getDefaultKeyMapping();\n    }\n\n    // When binding a key reset the moveState to avoid locking buttons.\n    public bindKey = (key: string, movement: Movements): void => {\n        this.keyMapping.set(key, movement);\n        this.moveState = getIdleMoveState();\n    };\n\n    public attachListeners = (): void => {\n        window.addEventListener('keydown', this.keyDownHandler);\n        window.addEventListener('keyup', this.keyUpHandler);\n    };\n\n    public dispose = (): void => {\n        window.addEventListener('keydown', this.keyDownHandler);\n        window.addEventListener('keyup', this.keyUpHandler);\n    };\n\n    private keyDownHandler = (e: KeyboardEvent): void => {\n        const movement = this.keyMapping.get(e.code);\n\n        if (isNil(movement)) {\n            return;\n        }\n\n        this.moveState[movement] = 1;\n    };\n\n    private keyUpHandler = (e: KeyboardEvent): void => {\n        const movement = this.keyMapping.get(e.code);\n\n        if (isNil(movement)) {\n            return;\n        }\n\n        this.moveState[movement] = 0;\n    };\n}\n","import * as THREE from 'three';\n\n/**\n * Singleton clock, anyone can get the instance and check the delta time.\n *\n * The delta must be recomputed with `tick` on every render\n */\nexport class PolyClock {\n    private clock: THREE.Clock;\n    public delta: number;\n    private static instance: PolyClock;\n\n    private constructor() {\n        // Autostarts\n        this.clock = new THREE.Clock();\n        this.delta = 0;\n    }\n\n    static getInstance = (): PolyClock => {\n        if (!PolyClock.instance) {\n            PolyClock.instance = new PolyClock();\n        }\n\n        return PolyClock.instance;\n    };\n\n    public tick = (): void => {\n        this.delta = this.clock.getDelta();\n    }\n}\n","import * as THREE from 'three';\nimport { PolyControls, Movements, MoveState, getIdleMoveState, lerpMoveStates } from './polyControls';\nimport { PolyClock } from '../clock/PolyClock';\nimport { MAX_RADIUS, MIN_RADIUS } from '../constants';\n\n/**\n * Transforms an object based on the supplied controls\n */\nconst MOVEMENT_EPSILON = 0.00001;\n\nexport class ObjectController {\n    private clock: PolyClock;\n    private moveState: MoveState;\n\n    private orbitSpeed: number;\n    private rollSpeed: number;\n    private forwardsAndBackwardsSpeed: number;\n    private inertiaFactor: number;\n\n    constructor(private controls: PolyControls, private object: THREE.Object3D) {\n        this.clock = PolyClock.getInstance();\n        this.moveState = getIdleMoveState();\n\n        this.orbitSpeed = 0.05;\n        this.rollSpeed = 0.05;\n        this.forwardsAndBackwardsSpeed = 0.5;\n        this.inertiaFactor = 0.1;\n\n        this.update();\n    }\n\n    // TODO: Make movement (and probably followCamera) frame independent\n    // See https://github.com/ivoelbert/poly-remake/ssues/2\n    public update = (): void => {\n        // Movement inertia\n        this.moveState = lerpMoveStates(this.moveState, this.controls.moveState, this.inertiaFactor);\n\n        // Forwards/backwards\n        const depthMovement = this.moveState[Movements.backwards] - this.moveState[Movements.forwards];\n        if (Math.abs(depthMovement) > MOVEMENT_EPSILON) {\n            const zOffset = depthMovement * this.forwardsAndBackwardsSpeed;\n\n            let objectRadius = this.object.position.length();\n\n            if (objectRadius + zOffset < MIN_RADIUS) {\n                objectRadius = MIN_RADIUS;\n            } else if (objectRadius + zOffset > MAX_RADIUS) {\n                objectRadius = MAX_RADIUS;\n            } else {\n                objectRadius += zOffset;\n            }\n\n            this.object.position.setLength(objectRadius);\n        }\n\n        // Orbit and Roll\n        const xAxis = new THREE.Vector3();\n        const yAxis = new THREE.Vector3();\n        const zAxis = new THREE.Vector3();\n        this.object.matrix.extractBasis(xAxis, yAxis, zAxis);\n\n        const verticalOrbit = this.moveState[Movements.up] - this.moveState[Movements.down];\n        const horizontalOrbit = this.moveState[Movements.right] - this.moveState[Movements.left];\n\n        const verticalVector = xAxis.clone();\n        verticalVector.multiplyScalar(verticalOrbit);\n        const horizontalVector = yAxis.clone();\n        horizontalVector.multiplyScalar(horizontalOrbit);\n\n        const directionVector = new THREE.Vector3().addVectors(verticalVector, horizontalVector).clampLength(0, 1);\n        const rotationAngle = directionVector.length();\n\n        if (rotationAngle > MOVEMENT_EPSILON) {\n            directionVector.normalize();\n            this.object.position.applyAxisAngle(directionVector, rotationAngle * this.orbitSpeed);\n        }\n\n        const roll = this.moveState[Movements.rollRight] - this.moveState[Movements.rollLeft];\n        yAxis.applyAxisAngle(zAxis, roll * this.rollSpeed);\n        this.object.up.copy(yAxis);\n        this.object.lookAt(0, 0, 0);\n    };\n}\n","import * as THREE from 'three';\nimport { PolyObject } from './polyObject';\nimport { MAX_RADIUS } from '../constants';\n\nexport class PolyShip implements PolyObject {\n    public mesh: THREE.Object3D;\n\n    constructor() {\n        const geometry = this.createGeometry();\n\n        const material = new THREE.MeshBasicMaterial({\n            color: 0xfafafa,\n            wireframe: true,\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.position.set(0, 0, MAX_RADIUS);\n    }\n\n    private createGeometry = (): THREE.BufferGeometry => {\n        const geometry = new THREE.BufferGeometry();\n\n        const frontPoint = [0, 0, 1];\n        const backTop = [0, 0.25, 0];\n        const backLeft = [-0.5, -0.25, 0];\n        const backRight = [0.5, -0.25, 0];\n\n        const vertices = new Float32Array([\n            ...frontPoint,\n            ...backTop,\n            ...backLeft,\n\n            ...frontPoint,\n            ...backTop,\n            ...backRight,\n\n            ...frontPoint,\n            ...backLeft,\n            ...backRight,\n\n            ...backTop,\n            ...backLeft,\n            ...backRight,\n        ]);\n\n        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n\n        return geometry;\n    };\n}\n","import * as THREE from 'three';\nimport { PolyClock } from '../clock/PolyClock';\n\nexport class FollowCamera extends THREE.PerspectiveCamera {\n    private clock: PolyClock;\n    private distance: number;\n    private inertiaFactor: number;\n\n    constructor(private followedObject: THREE.Object3D) {\n        super(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n        this.distance = 2;\n        this.inertiaFactor = 0.8;\n        this.clock = PolyClock.getInstance();\n\n        this.update();\n    }\n\n    // TODO: Make movement (and probably followCamera) frame independent\n    // See https://github.com/ivoelbert/poly-remake/issues/2\n    update = (): void => {\n        const followedPosition = this.followedObject.position.clone();\n        followedPosition.add(followedPosition.clone().normalize().multiplyScalar(this.distance));\n\n        const newPosition = new THREE.Vector3().lerpVectors(this.position, followedPosition, this.inertiaFactor);\n\n        this.position.copy(newPosition);\n        this.up.copy(this.followedObject.up);\n        this.lookAt(0, 0, 0);\n    };\n}\n","import * as THREE from 'three';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\n\nconst BLOOM_PARAMS = {\n    exposure: 1.05,\n    bloomStrength: 1.2,\n    bloomThreshold: 0,\n    bloomRadius: 0,\n};\n\nexport class PolyRenderer {\n    private renderer: THREE.WebGLRenderer;\n    private composer: EffectComposer;\n\n    constructor(scene: THREE.Scene, camera: THREE.Camera) {\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.toneMappingExposure = Math.pow(BLOOM_PARAMS.exposure, 4.0);\n\n        const renderScene = new RenderPass(scene, camera);\n\n        const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);\n        bloomPass.threshold = BLOOM_PARAMS.bloomThreshold;\n        bloomPass.strength = BLOOM_PARAMS.bloomStrength;\n        bloomPass.radius = BLOOM_PARAMS.bloomRadius;\n\n        this.composer = new EffectComposer(this.renderer);\n        this.composer.renderToScreen = false;\n        this.composer.addPass(renderScene);\n        this.composer.addPass(bloomPass);\n\n        this.composer.renderToScreen = true;\n    }\n\n    public getDomElement = (): HTMLCanvasElement => {\n        return this.renderer.domElement;\n    };\n\n    public resize = (): void => {\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.composer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    public render = (): void => {\n        this.composer.render();\n    };\n}\n","import { useEffect } from 'react';\nimport { Polybius } from '../game/polybius';\nimport { assertExists } from '../game/utils';\n\nconst polybius = new Polybius();\n\ntype CallbackRef = (element: HTMLElement | null) => void;\n\nexport const usePolybius = (): CallbackRef => {\n    useEffect(() => {\n        polybius.attachListeners();\n\n        return () => polybius.dispose();\n    }, []);\n\n    const callbackRef = (element: HTMLElement | null): void => {\n        assertExists(element).appendChild(polybius.getDomElement());\n    };\n\n    return callbackRef;\n};\n","import * as THREE from 'three';\nimport { Stars } from './objects/stars';\nimport { consoleInfo } from './utils';\nimport { Center } from './objects/center';\nimport { KeyboardControls } from './controls/keyboardControls';\nimport { PolyClock } from './clock/PolyClock';\nimport { ObjectController } from './controls/objectController';\nimport { PolyShip } from './objects/ship';\nimport { FollowCamera } from './objects/followCamera';\nimport { PolyRenderer } from './renderer';\n\nexport class Polybius {\n    private renderer: PolyRenderer;\n    private scene: THREE.Scene;\n    private clock: PolyClock;\n    private camera: FollowCamera;\n    private controls: KeyboardControls;\n    private objectController: ObjectController;\n    private ship: PolyShip;\n\n    constructor() {\n        // Set up the scene\n        this.scene = new THREE.Scene();\n        this.scene.fog = new THREE.FogExp2(0x000000, 0.000025);\n\n        // Set up the clock\n        this.clock = PolyClock.getInstance();\n\n        // Set up the ship\n        this.ship = new PolyShip();\n        this.scene.add(this.ship.mesh);\n\n        // Set up camera\n        this.camera = new FollowCamera(this.ship.mesh);\n\n        // Set up the renderer\n        this.renderer = new PolyRenderer(this.scene, this.camera);\n        this.renderer.resize();\n\n        // Some ambient light\n        const light = new THREE.AmbientLight(0xffffff);\n        this.scene.add(light);\n\n        const stars = new Stars();\n        this.scene.add(stars.mesh);\n\n        const center = new Center();\n        this.scene.add(center.mesh);\n\n        this.controls = new KeyboardControls();\n        this.objectController = new ObjectController(this.controls, this.ship.mesh);\n\n        // Start the render loop!\n        consoleInfo('Game started!');\n        this.animate();\n    }\n\n    public attachListeners = (): void => {\n        this.controls.attachListeners();\n        window.addEventListener('resize', this.resize);\n    };\n\n    public dispose = (): void => {\n        this.controls.dispose();\n        window.removeEventListener('resize', this.resize);\n    };\n\n    public getDomElement = (): HTMLCanvasElement => {\n        return this.renderer.getDomElement();\n    };\n\n    private resize = (): void => {\n        this.renderer.resize();\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n    };\n\n    // This function represents a frame. It's called once for every frame.\n    private animate = (): void => {\n        requestAnimationFrame(this.animate);\n        this.clock.tick();\n\n        this.objectController.update();\n        this.camera.update();\n\n        this.renderer.render();\n    };\n}\n","import React from 'react';\nimport './App.scss';\nimport { usePolybius } from './hooks/usePolybius';\n\nfunction App() {\n    const polybiusRef = usePolybius();\n\n    return <div className=\"App\" ref={polybiusRef} />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}